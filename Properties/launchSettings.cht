#####################################################################################
Controllers
#####################################################################################
FunctionsController

using BRMSBS_capstoneproject.Data;
using Microsoft.AspNetCore.Mvc;
using System.Linq;

namespace BRMSBS_capstoneproject.Controllers
{
    public class FunctionsController : Controller
    {
        private readonly MyAppContext _context;

        // Constructor to inject the DbContext
        public FunctionsController(MyAppContext context)
        {
            _context = context;
        }

        // Pages for Staff

        public IActionResult BookingS()
        {
            // Fetch only available rooms
            var rooms = _context.Rooms
                .Where(r => r.Status != "Occupied")
                .ToList();

            ViewBag.Rooms = rooms;
            return View();
        }

        public IActionResult ReservationS()
        {
            // Fetch only available rooms
            var rooms = _context.Rooms
                .Where(r => r.Status != "Pending")
                .ToList();

            ViewBag.Rooms = rooms;
            return View();
        }

        public IActionResult ReservationCheckInS()
        {
            var bookings = _context.Bookings.ToList();
            return View(bookings);
        }

        public IActionResult ManageRoomsS()
        {
            var rooms = _context.Rooms.ToList();
            return View(rooms);
        }

        // Pages for Admin

        public IActionResult BookingA()
        {
            // Fetch only available rooms
            var rooms = _context.Rooms
                .Where(r => r.Status != "Occupied")
                .ToList();

            ViewBag.Rooms = rooms;
            return View();
        }

        public IActionResult ReservationA()
        {
            // Fetch only available rooms
            var rooms = _context.Rooms
                .Where(r => r.Status != "Pending")
                .ToList();

            ViewBag.Rooms = rooms;
            return View();
        }

        public IActionResult ManageRoomsA()
        {
            var rooms = _context.Rooms.ToList(); 
            return View(rooms);
        }

        public IActionResult CalendarIntergrationA()
        {
            return View();
        }

        public IActionResult ManageStaff()
        {
            var users = _context.User.ToList();
            return View(users);
        }

        public IActionResult SalesReports()
        {
            var customers = _context.Customers
                .Where(c => c.Status == "Purchased" || c.Status == "Cancelled")
                .ToList();
            return View(customers); // Pass the list to the view
        }

        public IActionResult CancelBookReserve() 
        {
            var bookings = _context.Bookings.ToList();
            return View(bookings);
        }

        public IActionResult CheckOut()
        {
            var bookings = _context.Bookings.ToList();
            return View(bookings);
        }

        public IActionResult ReservationCheckInA()
        {
            var bookings = _context.Bookings.ToList();
            return View(bookings);
        }

    }
}

#####################################################################################
SystemController 

using BRMSBS_capstoneproject.Data;
using BRMSBS_capstoneproject.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using System.Security.Cryptography;
using System.Text;

namespace BRMSBS_capstoneproject.Controllers
{
    public class SystemController : Controller
    {
        private readonly MyAppContext _context;

        // Constructor to inject the DbContext
        public SystemController(MyAppContext context)
        {
            _context = context;
        }



        // GET: System/Login


        public IActionResult Login()
        {
            return View();
        }

        // Redirect to HomeDashboard after successful login for administrator
        public IActionResult HomeDashboardAdmin()
        {
            return View();
        }

        // Redirect to HomeDashboard after successful login for staff
        public IActionResult HomeDashboardStaff()
        {
            return View();
        }
















        // ALL FUNCTIONS
        // Hash a password using SHA-256
        private string ComputeSha256Hash(string rawData)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                // ComputeHash returns byte array
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));

                // Convert byte array to a string
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }
                return builder.ToString();
            }
        }


















        // ALL POSTS
        [HttpPost]

        // POST: System/Login
        public ActionResult Login(string username, string password)
        {
            // Admin credentials
            if (username == "adminuser" && password == "adminuser123")
            {
                return RedirectToAction("HomeDashboardAdmin", "System");
            }

            // Check user credentials from the database
            var user = _context.User.FirstOrDefault(u => u.Username == username);

            if (user != null && user.Password == ComputeSha256Hash(password))
            {
                return RedirectToAction("HomeDashboardStaff", "System");
            }

            // If login fails, set error message
            ViewBag.LoginError = "*Incorrect username or password.";
            return View();
        }

        // POST: System/CreateAccount
        public IActionResult CreateAccount(string Username, string Password)
        {
            // Hash password using SHA-256
            string hashedPassword = ComputeSha256Hash(Password); // Assuming you have this method

            // Create and save the user (implement your logic here)
            var user = new UserModel { Username = Username, Password = hashedPassword };
            _context.User.Add(user);
            _context.SaveChanges(); // Save user to database

            TempData["AccountCreated"] = true;
            return RedirectToAction("ManageStaff", "Functions");
        }

        // POST: System/EditAccount
        public IActionResult EditAccount(int Id, string Username, string Password)
        {
            var user = _context.User.FirstOrDefault(u => u.Id == Id);
            if (user == null)
            {
                return NotFound();
            }

            user.Username = Username;

            if (!string.IsNullOrWhiteSpace(Password))
            {
                user.Password = ComputeSha256Hash(Password);
            }

            _context.SaveChanges();

            TempData["AccountEdited"] = "edited";
            return RedirectToAction("ManageStaff", "Functions");
        }

        // POST: System/DeleteAccount
        public IActionResult DeleteAccount(int Id)
        {
            var user = _context.User.FirstOrDefault(u => u.Id == Id);
            if (user == null)
            {
                return NotFound();
            }

            _context.User.Remove(user);
            _context.SaveChanges();

            TempData["AccountDeleted"] = true;
            return RedirectToAction("ManageStaff", "Functions");
        }

        // POST: System/Logout - Logout action
        public IActionResult Logout()
        {
            // Clear session or authentication here if used
            return RedirectToAction("Login", "System");
        }


        // -- BOOKING --

        // POST: System/BookRoom
        public IActionResult BookRoom([FromForm] BookingModel booking)
        {

            if (ModelState.IsValid)
            {
                // Save booking
                _context.Bookings.Add(booking);

                // Update room status
                var room = _context.Rooms.FirstOrDefault(r => 
                r.RoomNumber == int.Parse(booking.RoomNumber) && 
                r.RoomType == booking.RoomType);
                if (room != null)
                {
                    room.Status = "Occupied";
                }

                _context.SaveChanges();

                ModelState.Clear(); // Clear form fields after success
                TempData["BookingSuccess"] = true; // Set flag for success modal
                return RedirectToAction("BookingA", "Functions");
            }
            return View("BookingA", booking);
        }

        public IActionResult BookRoomS([FromForm] BookingModel booking) // Staff Booking
        {

            if (ModelState.IsValid)
            {
                // Save booking
                _context.Bookings.Add(booking);

                // Update room status
                var room = _context.Rooms.FirstOrDefault(r =>
                r.RoomNumber == int.Parse(booking.RoomNumber) &&
                r.RoomType == booking.RoomType);
                if (room != null)
                {
                    room.Status = "Occupied";
                }

                _context.SaveChanges();

                ModelState.Clear(); // Clear form fields after success
                TempData["BookingSuccess"] = true; // Set flag for success modal
                return RedirectToAction("BookingS", "Functions");
            }
            return View("BookingS", booking);
        }

        // -- RESERVATION --


        // POST: System/BookRoom
        public IActionResult ReserveRoom([FromForm] BookingModel booking)
        {
            if (ModelState.IsValid)
            {
                // Save booking
                _context.Bookings.Add(booking);

                // Update room status
                var room = _context.Rooms.FirstOrDefault(r =>
                    r.RoomNumber == int.Parse(booking.RoomNumber) &&
                    r.RoomType == booking.RoomType);
                if (room != null)
                {
                    room.Status = "Occupied";
                    booking.BookReserve = "Reservation";
                    booking.Status = "Pending";
                }

                _context.SaveChanges();

                ModelState.Clear(); // Clear form fields after success
                TempData["ReservationSuccess"] = true; // Set flag for success modal
                return RedirectToAction("ReservationA", "Functions");
            }
            return View("ReservationA", booking);
        }

        public IActionResult ReserveRoomS([FromForm] BookingModel booking) // Staff Reservation
        {
            if (ModelState.IsValid)
            {
                // Save booking
                _context.Bookings.Add(booking);

                // Update room status
                var room = _context.Rooms.FirstOrDefault(r =>
                    r.RoomNumber == int.Parse(booking.RoomNumber) &&
                    r.RoomType == booking.RoomType);
                if (room != null)
                {
                    room.Status = "Occupied";
                    booking.BookReserve = "Reservation";
                    booking.Status = "Pending";
                }

                _context.SaveChanges();

                ModelState.Clear(); // Clear form fields after success
                TempData["ReservationSuccess"] = true; // Set flag for success modal
                return RedirectToAction("ReservationS", "Functions");
            }
            return View("ReservationS", booking);
        }

        // -- MANAGE ROOMS --

        // POST: SYSTEM/CreateRoomNRoomType
        public IActionResult CreateRoomNRoomType(int RoomNumber, string RoomType)
        {
            // Create and save the room (implement your logic here)
            var room = new RoomModel { RoomNumber = RoomNumber, RoomType = RoomType };
            _context.Rooms.Add(room);
            _context.SaveChanges(); // Save rooms to database

            TempData["RoomCreated"] = true;
            return RedirectToAction("ManageRoomsA", "Functions");
        }

        // POST: SYSTEM/EditRoomNRoomType
        public IActionResult EditRoomNRoomType(int Id, int RoomNumber, string RoomType)
        {
            var room = _context.Rooms.FirstOrDefault(r => r.Id == Id);
            if (room == null)
            {
                return NotFound();
            }
            room.RoomNumber = RoomNumber;
            room.RoomType = RoomType;
            _context.SaveChanges();
            TempData["RoomEdited"] = "edited";
            return RedirectToAction("ManageRoomsA", "Functions");
        }

        // POST: SYSTEM/DeleteRoomNRoomType
        public IActionResult DeleteRoomNRoomType(int Id)
        {
            var room = _context.Rooms.FirstOrDefault(r => r.Id == Id);
            if (room == null)
            {
                return NotFound();
            }
            _context.Rooms.Remove(room);
            _context.SaveChanges();
            TempData["RoomDeleted"] = true;
            return RedirectToAction("ManageRoomsA", "Functions");
        }
        public IActionResult SetRoomAsAvailable(int Id)
        {
            var room = _context.Rooms.FirstOrDefault(r => r.Id == Id);
            if (room != null)
            {
                room.Status = "Available";
                _context.SaveChanges();
                TempData["RoomActivated"] = true; // Must match Razor key
            }
            return RedirectToAction("ManageRoomsA", "Functions");
        }

        // -- CANCEL BOOK-RESERVE --

        [HttpPost]
        public IActionResult CancelBooking(int id)
        {
            // Find booking
            var booking = _context.Bookings.FirstOrDefault(b => b.Id == id);
            if (booking != null)
            {
                // Transfer data to CustomerModel
                var customer = new CustomerModel
                {
                    FirstName = booking.FirstName,
                    LastName = booking.LastName,
                    MI = booking.MI,
                    Address = booking.Address,
                    Email = booking.Email,
                    ContactNumber = int.TryParse(booking.ContactNumber, out var contactNum) ? contactNum : 0,
                    Nationality = booking.Nationality,
                    Purpose = booking.Purpose,
                    ArrivalDate = booking.ArrivalDate,
                    DepartureDate = booking.DepartureDate,
                    RoomNumber = booking.RoomNumber,
                    RoomType = booking.RoomType,
                    RoomRates = booking.RoomRates,
                    NumberOfPax = booking.NumberOfPax,
                    BookReserve = booking.BookReserve,
                    CheckOutDateTime = DateTime.Now, // Set checkout date/time
                    Payment = "None",
                    Status = "Cancelled"
                };

                // Save to database
                _context.Customers.Add(customer);


                // Find room and set to available
                var room = _context.Rooms.FirstOrDefault(r => r.RoomNumber.ToString() == booking.RoomNumber && r.RoomType == booking.RoomType);
                if (room != null)
                {
                    room.Status = "Available";
                    _context.Rooms.Update(room);
                }

                // Clear booking data (or remove booking)
                _context.Bookings.Remove(booking);
                _context.SaveChanges();
            }
            TempData["CancelSuccess"] = true;
            TempData["CancelledBookingId"] = id;
            return RedirectToAction("CancelBookReserve", "Functions");
        }

        // -- CHECKOUT --

        [HttpPost]
        [Route("System/CheckOut/{bookingId}")]
        public IActionResult CheckOut(int bookingId, double grandTotal, string paymentOption)
        {
            // Find the booking by ID
            var booking = _context.Bookings.FirstOrDefault(b => b.Id == bookingId);
            if (booking == null)
            {
                return NotFound();
            }

            // Transfer data to CustomerModel
            var customer = new CustomerModel
            {
                FirstName = booking.FirstName,
                LastName = booking.LastName,
                MI = booking.MI,
                Address = booking.Address,
                Email = booking.Email,
                ContactNumber = int.TryParse(booking.ContactNumber, out var contactNum) ? contactNum : 0,
                Nationality = booking.Nationality,
                Purpose = booking.Purpose,
                ArrivalDate = booking.ArrivalDate,
                DepartureDate = booking.DepartureDate,
                RoomNumber = booking.RoomNumber,
                RoomType = booking.RoomType,
                RoomRates = booking.RoomRates,
                NumberOfPax = booking.NumberOfPax,
                BookReserve = booking.BookReserve,
                CheckOutDateTime = DateTime.Now, // Set checkout date/time
                GrandAmount = grandTotal,  // Save grand total here
                Payment = paymentOption // Save payment option here
            };

            // Save to database
            _context.Customers.Add(customer);

            // Set room status to "Available"
            var room = _context.Rooms.FirstOrDefault(r => r.RoomNumber.ToString() == booking.RoomNumber && r.RoomType == booking.RoomType);
            if (room != null)
            {
                room.Status = "Maintainance";
                _context.Rooms.Update(room);
            }

            // Remove the booking
            _context.Bookings.Remove(booking);
            _context.SaveChanges();

            // Redirect or show confirmation
            TempData["CheckOutSuccess"] = true;
            return RedirectToAction("CheckOut", "Functions");
        }

        // -- RESERVATION CHECK OUT --

        [HttpPost]
        public IActionResult ReservationCheckIn(int id)
        {
            // Find booking
            var booking = _context.Bookings.FirstOrDefault(b => b.Id == id);
            if (booking != null)
            {
                booking.Status = "Checked In"; // Set status to "Checked In"
                _context.Bookings.Update(booking); // Mark entity as modified
                _context.SaveChanges();
            }
            TempData["CheckInSuccess"] = true;
            TempData["CheckInBookingId"] = id;
            return RedirectToAction("ReservationCheckInA", "Functions");
        }

        public IActionResult ReservationCheckInS(int id) // Staff Reservation Check In
        {
            // Find booking
            var booking = _context.Bookings.FirstOrDefault(b => b.Id == id);
            if (booking != null)
            {
                booking.Status = "Checked In"; // Set status to "Checked In"
                _context.Bookings.Update(booking); // Mark entity as modified
                _context.SaveChanges();
            }
            TempData["CheckInSuccess"] = true;
            TempData["CheckInBookingId"] = id;
            return RedirectToAction("ReservationCheckInS", "Functions");
        }

        // - SALES REPORT --

        [HttpPost]
        public IActionResult DeleteCustomer(int customerId)
        {
            var customer = _context.Customers.FirstOrDefault(c => c.Id == customerId);
            if (customer != null)
            {   
                _context.Customers.Remove(customer);
                _context.SaveChanges();
                TempData["CustomerDeleted"] = true;
            }
            return RedirectToAction("SalesReports", "Functions");
        }
    }
}


#####################################################################################
MyAppContext.cs

namespace BRMSBS_capstoneproject.Data
{
    public class MyAppContext : DbContext
    {
        // Constructor to pass options to the base DbContext
        public MyAppContext(DbContextOptions<MyAppContext> options) : base(options) 
        { 
        }
        public DbSet<UserModel> User { get; set; }
        public DbSet<BookingModel> Bookings { get; set; }
        public DbSet<RoomModel> Rooms { get; set; }
        public DbSet<CustomerModel> Customers { get; set; }
    }
}

#####################################################################################
Models
#####################################################################################
BookingModel

public class BookingModel
{
    [Key]
    public int Id { get; set; }

    [Required]
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string MI { get; set; }
    public string Address { get; set; }
    public string Email { get; set; }
    public string ContactNumber { get; set; }
    public string Nationality { get; set; }
    public string Purpose { get; set; }
    public DateTime ArrivalDate { get; set; }
    public DateTime DepartureDate { get; set; }
    public string RoomNumber { get; set; }
    public string RoomType { get; set; }
    public string RoomRates { get; set; }
    public int NumberOfPax { get; set; }
    public string Status { get; set; } = "Checked In";
    public string BookReserve { get; set; } = "Booking";
}

#####################################################################################
CustomerModel

public class CustomerModel
{
    [Key]
    public int Id { get; set; }

    [Required]
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string MI { get; set; }
    public string Address { get; set; }
    public string Email { get; set; }
    public int ContactNumber { get; set; }
    public string Nationality { get; set; }
    public string Purpose { get; set; }
    public DateTime ArrivalDate { get; set; }
    public DateTime DepartureDate { get; set; }
    public string RoomNumber { get; set; }
    public string RoomType { get; set; }
    public string RoomRates { get; set; }
    public int NumberOfPax { get; set; }
    public string Payment { get; set; } 
    public string Status { get; set; } = "Purchased";
    public string BookReserve { get; set; }
    public DateTime CheckOutDateTime { get; set; }
    public double GrandAmount { get; set; }
}

#####################################################################################
ErrorVM

namespace BRMSBS_capstoneproject.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}
#####################################################################################
RoomModel

namespace BRMSBS_capstoneproject.Models
{
    public class RoomModel
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int RoomNumber { get; set; }
        public string RoomType { get; set; }
        public string Status { get; set; } = "Available";
    }
}
#####################################################################################
UserModel

namespace BRMSBS_capstoneproject.Models
{
    public class UserModel
    {

        // Primary key
        [Key]
        public int Id { get; set; }

        // Username and Password fields
        [Required]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }
    }
}
#####################################################################################
Functions
#####################################################################################
BookingA

@{
    ViewData["Title"] = "Booking";
    Layout = "~/Views/Layouts/BookingLayoutA.cshtml";
    var bookingSuccess = TempData["BookingSuccess"] as bool?;
    var rooms = ViewBag.Rooms as List<BRMSBS_capstoneproject.Models.RoomModel>;
}

<div class="text-ctr"><b> Add a booking room </b></div>

<div class="containerbox">

    <form class="formbox" method="post" id="bookingForm" action="/System/BookRoom" autocomplete="off">

        <div class="formrow">

            <div class="form-group row mb-3">
                <label for="FirstName" class="col-sm-5 col-form-label">First Name</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="FirstName" name="FirstName" required />
                </div>
            </div>
            <div class="form-group row mb-3">
                <label for="LastName" class="col-sm-5 col-form-label">Last Name</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="LastName" name="LastName" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="MI" class="col-sm-5 col-form-label">M.I.</label>
                <div class="col-sm-3">
                    <input type="text" class="form-control" id="MI" name="MI" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Address" class="col-sm-5 col-form-label">Address</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="Address" name="Address" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Email" class="col-sm-5 col-form-label">Email Address</label>
                <div class="col-sm-7">
                    <input type="email" class="form-control" id="Email" name="Email" required/>
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="ContactNumber" class="col-sm-5 col-form-label">Contact Number</label>
                <div class="col-sm-7">
                    <input type="tel" class="form-control" id="ContactNumber" name="ContactNumber" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Nationality" class="col-sm-5 col-form-label">Nationality</label>
                <div class="col-sm-7">
                    <select class="form-control" id="Nationality" name="Nationality" required>
                        <option value="">-- Select here --</option>
                        <option value="Filipino">Filipino</option>
                        <option value="Others">Others</option>
                    </select>
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Purpose" class="col-sm-5 col-form-label">Purpose</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="Purpose" name="Purpose" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="ArrivalDate" class="col-sm-5 col-form-label">Arrival Date</label>
                <div class="col-sm-7">
                    <!-- Arrival Date (already readonly and set to today) -->
                    <input type="date" class="form-control" id="ArrivalDate" name="ArrivalDate" required 
                       value="@DateTime.Now.ToString("yyyy-MM-dd")"
                       min="@DateTime.Now.ToString("yyyy-MM-dd")"
                       readonly />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="DepartureDate" class="col-sm-5 col-form-label">Departure Date</label>
                <div class="col-sm-7">
                    <!-- Departure Date (set min to tomorrow) -->
                    <input type="date" class="form-control" id="DepartureDate" name="DepartureDate" required 
                       min="@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")" />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="RoomRates" class="col-sm-5 col-form-label">Room Rates</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomRates" name="RoomRates" required>
                        <option value="">-- Select here --</option>
                        <option value="499">499 - Standard</option>
                        <option value="699">699 - Deluxe</option>
                        <option value="999">999 - Premium</option>
                    </select>
                </div>
            </div>
            <!-- Room Type -->
            <div class="form-group row mb-2">
                <label for="RoomType" class="col-sm-5 col-form-label">Room Type</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomType" name="RoomType" required>
                        <option value=""></option>
                        @if (rooms != null)
                        {
                            foreach (var roomType in rooms.Where(r => r.Status == "Available").Select(r => r.RoomType).Distinct())
                            {
                                <option value="@roomType">@roomType</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <!-- Room Number -->
            <div class="form-group row mb-2">
                <label for="RoomNumber" class="col-sm-5 col-form-label">Room Number</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomNumber" name="RoomNumber" required>
                        <option value=""></option>
                        @if (rooms != null)
                        {
                            foreach (var room in rooms.Where(r => r.Status == "Available"))
                            {
                                <option value="@room.RoomNumber">@room.RoomNumber</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="NumberOfPax" class="col-sm-5 col-form-label">Number of Pax</label>
                <div class="col-sm-7">
                    <input type="number" class="form-control" id="NumberOfPax" name="NumberOfPax" required />
                </div>
            </div>
            <div class="form-group row mb-1">
                <button type="button" class="btn btn-primary" id="bookNowBtn">Proceed Booking</button>
            </div>
        </div>      
    </form>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmModalLabel">Confirm Booking Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
          <table class="table table-bordered">
            <tbody>
                <tr><th>First Name</th><td id="modalFirstName"></td></tr>
                <tr><th>Last Name</th><td id="modalLastName"></td></tr>
                <tr><th>M.I.</th><td id="modalMI"></td></tr>
                <tr><th>Address</th><td id="modalAddress"></td></tr>
                <tr><th>Email</th><td id="modalEmail"></td></tr>
                <tr><th>Contact Number</th><td id="modalContactNumber"></td></tr>
                <tr><th>Nationality</th><td id="modalNationality"></td></tr>
                <tr><th>Purpose</th><td id="modalPurpose"></td></tr>
                <tr><th>Arrival Date</th><td id="modalArrivalDate"></td></tr>
                <tr><th>Departure Date</th><td id="modalDepartureDate"></td></tr>
                <tr><th>Room Number</th><td id="modalRoomNumber"></td></tr>
                <tr><th>Room Type</th><td id="modalRoomType"></td></tr>
                <tr><th>Room Rates</th><td id="modalRoomRates"></td></tr>
                <tr><th>Number of Pax</th><td id="modalNumberOfPax"></td></tr>
            </tbody>
             Do you want to add and confirm this booking room? Please double check the customer's info.
        </table>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmProceedBtn">Book Now</button>
      </div>
    </div>
  </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
            <div class="modal-header bg-success text-white">
        <h5 class="modal-title" id="successModalLabel">Booking Successful</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
                 <div class="modal-body">
                    Your booking has been successfully added.
                </div>
             <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
document.getElementById('bookNowBtn').addEventListener('click', function () {
    // Fill modal with form data
    document.getElementById('modalFirstName').textContent = document.getElementById('FirstName').value;
    document.getElementById('modalLastName').textContent = document.getElementById('LastName').value;
    document.getElementById('modalMI').textContent = document.getElementById('MI').value;
    document.getElementById('modalAddress').textContent = document.getElementById('Address').value;
    
    document.getElementById('modalEmail').textContent = document.getElementById('Email').value;
    document.getElementById('modalContactNumber').textContent = document.getElementById('ContactNumber').value;
    document.getElementById('modalNationality').textContent = document.getElementById('Nationality').value;
    document.getElementById('modalPurpose').textContent = document.getElementById('Purpose').value;
    document.getElementById('modalArrivalDate').textContent = document.getElementById('ArrivalDate').value;
    document.getElementById('modalDepartureDate').textContent = document.getElementById('DepartureDate').value;
    document.getElementById('modalRoomNumber').textContent = document.getElementById('RoomNumber').value;
    document.getElementById('modalRoomType').textContent = document.getElementById('RoomType').value;
    document.getElementById('modalRoomRates').textContent = document.getElementById('RoomRates').value;
    document.getElementById('modalNumberOfPax').textContent = document.getElementById('NumberOfPax').value;

    // Show modal
    var modal = new bootstrap.Modal(document.getElementById('confirmModal'));
    modal.show();
});

// On confirm, submit the form
document.getElementById('confirmProceedBtn').addEventListener('click', function () {
    document.getElementById('bookingForm').submit();
});

// Show success modal if booking was successful, auto-close after 5 seconds
@if (bookingSuccess == true)
{
    <text>
    document.addEventListener('DOMContentLoaded', function() {
        var modal = new bootstrap.Modal(document.getElementById('successModal'));
        modal.show();
        setTimeout(function() {
            modal.hide();
        }, 5000);
    });
    </text>
}

document.addEventListener('DOMContentLoaded', function () {
    var arrivalInput = document.getElementById('ArrivalDate');
    var departureInput = document.getElementById('DepartureDate');

    function setDepartureMin() {
        // Set min to one day after arrival date
        var arrivalDate = new Date(arrivalInput.value || arrivalInput.min);
        var minDepartureDate = new Date(arrivalDate);
        minDepartureDate.setDate(arrivalDate.getDate() + 1);

        var minDateStr = minDepartureDate.toISOString().split('T')[0];
        departureInput.min = minDateStr;

        // If departure date is before min, reset it
        if (departureInput.value < minDateStr) {
            departureInput.value = minDateStr;
        }
    }

    // Initial set on page load
    setDepartureMin();

    // Arrival date is readonly, but if ever changed programmatically, update departure min
    arrivalInput.addEventListener('change', setDepartureMin);
});
</script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    var bookNowBtn = document.getElementById('bookNowBtn');
    var requiredFields = [
        'FirstName', 'LastName', 'MI', 'Address', 'Email', 'ContactNumber',
        'Nationality', 'Purpose', 'ArrivalDate', 'DepartureDate',
        'RoomNumber', 'RoomType', 'RoomRates', 'NumberOfPax'
    ];

    function checkFormFilled() {
        var allFilled = requiredFields.every(function(id) {
            var el = document.getElementById(id);
            if (!el) return false;
            if (el.tagName === 'SELECT') {
                return el.value !== '';
            }
            return el.value.trim() !== '';
        });
        bookNowBtn.disabled = !allFilled;
    }

    // Initial check
    checkFormFilled();

    // Add event listeners to all required fields
    requiredFields.forEach(function(id) {
        var el = document.getElementById(id);
        if (el) {
            el.addEventListener('input', checkFormFilled);
            el.addEventListener('change', checkFormFilled);
        }
    });
});
</script>
<script>
    // Pass rooms data to JS using System.Text.Json
    var rooms = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Rooms));

    function updateRoomTypeAndNumber() {
        var rate = document.getElementById('RoomRates').value;
        var roomTypeSelect = document.getElementById('RoomType');
        var roomNumberSelect = document.getElementById('RoomNumber');

        let type = '';
        if (rate === '499') type = 'Standard';
        else if (rate === '699') type = 'Deluxe';
        else if (rate === '999') type = 'Premium';

        // Filter available rooms by type
        var availableRooms = rooms.filter(r => r.Status === "Available" && r.RoomType === type);

        // Update RoomType select
        roomTypeSelect.innerHTML = '';
        if (type && availableRooms.length > 0) {
            roomTypeSelect.innerHTML = `<option value="${type}">${type}</option>`;
        } else if (type) {
            roomTypeSelect.innerHTML = `<option value="">Not available</option>`;
        } else {
            roomTypeSelect.innerHTML = `<option value="">*Select Room Rate First</option>`;
        }

        // Update RoomNumber select
        roomNumberSelect.innerHTML = '';
        if (type && availableRooms.length > 0) {
            roomNumberSelect.innerHTML = `<option value="">-- Select room here --</option>`;
            availableRooms.forEach(r => {
                roomNumberSelect.innerHTML += `<option value="${r.RoomNumber}">${r.RoomNumber}</option>`;
            });
        } else if (type) {
            roomNumberSelect.innerHTML = `<option value="">Not available</option>`;
        } else {
            roomNumberSelect.innerHTML = `<option value="">*Select Room Rate First</option>`;
        }
    }

    document.getElementById('RoomRates').addEventListener('change', updateRoomTypeAndNumber);

    // Optionally, run on page load
    document.addEventListener('DOMContentLoaded', updateRoomTypeAndNumber);
</script>

#####################################################################################
BookingS

@{
    ViewData["Title"] = "Booking";
    Layout = "~/Views/Layouts/BookingLayoutS.cshtml";
    var bookingSuccess = TempData["BookingSuccess"] as bool?;
    var rooms = ViewBag.Rooms as List<BRMSBS_capstoneproject.Models.RoomModel>;
}

<div class="text-ctr"><b> Add a booking room </b></div>

<div class="containerbox">

    <form class="formbox" method="post" id="bookingForm" action="/System/BookRoomS" autocomplete="off">

        <div class="formrow">

            <div class="form-group row mb-3">
                <label for="FirstName" class="col-sm-5 col-form-label">First Name</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="FirstName" name="FirstName" required />
                </div>
            </div>
            <div class="form-group row mb-3">
                <label for="LastName" class="col-sm-5 col-form-label">Last Name</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="LastName" name="LastName" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="MI" class="col-sm-5 col-form-label">M.I.</label>
                <div class="col-sm-3">
                    <input type="text" class="form-control" id="MI" name="MI" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Address" class="col-sm-5 col-form-label">Address</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="Address" name="Address" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Email" class="col-sm-5 col-form-label">Email Address</label>
                <div class="col-sm-7">
                    <input type="email" class="form-control" id="Email" name="Email" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="ContactNumber" class="col-sm-5 col-form-label">Contact Number</label>
                <div class="col-sm-7">
                    <input type="tel" class="form-control" id="ContactNumber" name="ContactNumber" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Nationality" class="col-sm-5 col-form-label">Nationality</label>
                <div class="col-sm-7">
                    <select class="form-control" id="Nationality" name="Nationality" required>
                        <option value="">-- Select here --</option>
                        <option value="Filipino">Filipino</option>
                        <option value="Others">Others</option>
                    </select>
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Purpose" class="col-sm-5 col-form-label">Purpose</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="Purpose" name="Purpose" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="ArrivalDate" class="col-sm-5 col-form-label">Arrival Date</label>
                <div class="col-sm-7">
                    <!-- Arrival Date (already readonly and set to today) -->
                    <input type="date" class="form-control" id="ArrivalDate" name="ArrivalDate" required
                           value="@DateTime.Now.ToString("yyyy-MM-dd")"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")"
                           readonly />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="DepartureDate" class="col-sm-5 col-form-label">Departure Date</label>
                <div class="col-sm-7">
                    <!-- Departure Date (set min to tomorrow) -->
                    <input type="date" class="form-control" id="DepartureDate" name="DepartureDate" required
                           min="@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")" />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="RoomRates" class="col-sm-5 col-form-label">Room Rates</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomRates" name="RoomRates" required>
                        <option value="">-- Select here --</option>
                        <option value="499">499 - Standard</option>
                        <option value="699">699 - Deluxe</option>
                        <option value="999">999 - Premium</option>
                    </select>
                </div>
            </div>
            <!-- Room Type -->
            <div class="form-group row mb-2">
                <label for="RoomType" class="col-sm-5 col-form-label">Room Type</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomType" name="RoomType" required>
                        <option value=""></option>
                        @if (rooms != null)
                        {
                            foreach (var roomType in rooms.Where(r => r.Status == "Available").Select(r => r.RoomType).Distinct())
                            {
                                <option value="@roomType">@roomType</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <!-- Room Number -->
            <div class="form-group row mb-2">
                <label for="RoomNumber" class="col-sm-5 col-form-label">Room Number</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomNumber" name="RoomNumber" required>
                        <option value=""></option>
                        @if (rooms != null)
                        {
                            foreach (var room in rooms.Where(r => r.Status == "Available"))
                            {
                                <option value="@room.RoomNumber">@room.RoomNumber</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="NumberOfPax" class="col-sm-5 col-form-label">Number of Pax</label>
                <div class="col-sm-7">
                    <input type="number" class="form-control" id="NumberOfPax" name="NumberOfPax" required />
                </div>
            </div>
            <div class="form-group row mb-1">
                <button type="button" class="btn btn-primary" id="bookNowBtn">Proceed Booking</button>
            </div>
        </div>
    </form>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Booking Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table table-bordered">
                    <tbody>
                        <tr><th>First Name</th><td id="modalFirstName"></td></tr>
                        <tr><th>Last Name</th><td id="modalLastName"></td></tr>
                        <tr><th>M.I.</th><td id="modalMI"></td></tr>
                        <tr><th>Address</th><td id="modalAddress"></td></tr>
                        <tr><th>Email</th><td id="modalEmail"></td></tr>
                        <tr><th>Contact Number</th><td id="modalContactNumber"></td></tr>
                        <tr><th>Nationality</th><td id="modalNationality"></td></tr>
                        <tr><th>Purpose</th><td id="modalPurpose"></td></tr>
                        <tr><th>Arrival Date</th><td id="modalArrivalDate"></td></tr>
                        <tr><th>Departure Date</th><td id="modalDepartureDate"></td></tr>
                        <tr><th>Room Number</th><td id="modalRoomNumber"></td></tr>
                        <tr><th>Room Type</th><td id="modalRoomType"></td></tr>
                        <tr><th>Room Rates</th><td id="modalRoomRates"></td></tr>
                        <tr><th>Number of Pax</th><td id="modalNumberOfPax"></td></tr>
                    </tbody>
                    Do you want to add and confirm this booking room? Please double check the customer's info.
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmProceedBtn">Book Now</button>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">Booking Successful</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Your booking has been successfully added.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById('bookNowBtn').addEventListener('click', function () {
        // Fill modal with form data
        document.getElementById('modalFirstName').textContent = document.getElementById('FirstName').value;
        document.getElementById('modalLastName').textContent = document.getElementById('LastName').value;
        document.getElementById('modalMI').textContent = document.getElementById('MI').value;
        document.getElementById('modalAddress').textContent = document.getElementById('Address').value;

        document.getElementById('modalEmail').textContent = document.getElementById('Email').value;
        document.getElementById('modalContactNumber').textContent = document.getElementById('ContactNumber').value;
        document.getElementById('modalNationality').textContent = document.getElementById('Nationality').value;
        document.getElementById('modalPurpose').textContent = document.getElementById('Purpose').value;
        document.getElementById('modalArrivalDate').textContent = document.getElementById('ArrivalDate').value;
        document.getElementById('modalDepartureDate').textContent = document.getElementById('DepartureDate').value;
        document.getElementById('modalRoomNumber').textContent = document.getElementById('RoomNumber').value;
        document.getElementById('modalRoomType').textContent = document.getElementById('RoomType').value;
        document.getElementById('modalRoomRates').textContent = document.getElementById('RoomRates').value;
        document.getElementById('modalNumberOfPax').textContent = document.getElementById('NumberOfPax').value;

        // Show modal
        var modal = new bootstrap.Modal(document.getElementById('confirmModal'));
        modal.show();
    });

    // On confirm, submit the form
    document.getElementById('confirmProceedBtn').addEventListener('click', function () {
        document.getElementById('bookingForm').submit();
    });

    // Show success modal if booking was successful, auto-close after 5 seconds
    @if (bookingSuccess == true)
    {
            <text>
            document.addEventListener('DOMContentLoaded', function() {
                var modal = new bootstrap.Modal(document.getElementById('successModal'));
                modal.show();
                setTimeout(function() {
                    modal.hide();
                }, 5000);
            });
            </text>
    }

    document.addEventListener('DOMContentLoaded', function () {
        var arrivalInput = document.getElementById('ArrivalDate');
        var departureInput = document.getElementById('DepartureDate');

        function setDepartureMin() {
            // Set min to one day after arrival date
            var arrivalDate = new Date(arrivalInput.value || arrivalInput.min);
            var minDepartureDate = new Date(arrivalDate);
            minDepartureDate.setDate(arrivalDate.getDate() + 1);

            var minDateStr = minDepartureDate.toISOString().split('T')[0];
            departureInput.min = minDateStr;

            // If departure date is before min, reset it
            if (departureInput.value < minDateStr) {
                departureInput.value = minDateStr;
            }
        }

        // Initial set on page load
        setDepartureMin();

        // Arrival date is readonly, but if ever changed programmatically, update departure min
        arrivalInput.addEventListener('change', setDepartureMin);
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var bookNowBtn = document.getElementById('bookNowBtn');
        var requiredFields = [
            'FirstName', 'LastName', 'MI', 'Address', 'Email', 'ContactNumber',
            'Nationality', 'Purpose', 'ArrivalDate', 'DepartureDate',
            'RoomNumber', 'RoomType', 'RoomRates', 'NumberOfPax'
        ];

        function checkFormFilled() {
            var allFilled = requiredFields.every(function(id) {
                var el = document.getElementById(id);
                if (!el) return false;
                if (el.tagName === 'SELECT') {
                    return el.value !== '';
                }
                return el.value.trim() !== '';
            });
            bookNowBtn.disabled = !allFilled;
        }

        // Initial check
        checkFormFilled();

        // Add event listeners to all required fields
        requiredFields.forEach(function(id) {
            var el = document.getElementById(id);
            if (el) {
                el.addEventListener('input', checkFormFilled);
                el.addEventListener('change', checkFormFilled);
            }
        });
    });
</script>
<script>
    // Pass rooms data to JS using System.Text.Json
    var rooms = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Rooms));

    function updateRoomTypeAndNumber() {
        var rate = document.getElementById('RoomRates').value;
        var roomTypeSelect = document.getElementById('RoomType');
        var roomNumberSelect = document.getElementById('RoomNumber');

        let type = '';
        if (rate === '499') type = 'Standard';
        else if (rate === '699') type = 'Deluxe';
        else if (rate === '999') type = 'Premium';

        // Filter available rooms by type
        var availableRooms = rooms.filter(r => r.Status === "Available" && r.RoomType === type);

        // Update RoomType select
        roomTypeSelect.innerHTML = '';
        if (type && availableRooms.length > 0) {
            roomTypeSelect.innerHTML = `<option value="${type}">${type}</option>`;
        } else if (type) {
            roomTypeSelect.innerHTML = `<option value="">Not available</option>`;
        } else {
            roomTypeSelect.innerHTML = `<option value="">*Select Room Rate First</option>`;
        }

        // Update RoomNumber select
        roomNumberSelect.innerHTML = '';
        if (type && availableRooms.length > 0) {
            roomNumberSelect.innerHTML = `<option value="">-- Select room here --</option>`;
            availableRooms.forEach(r => {
                roomNumberSelect.innerHTML += `<option value="${r.RoomNumber}">${r.RoomNumber}</option>`;
            });
        } else if (type) {
            roomNumberSelect.innerHTML = `<option value="">Not available</option>`;
        } else {
            roomNumberSelect.innerHTML = `<option value="">*Select Room Rate First</option>`;
        }
    }

    document.getElementById('RoomRates').addEventListener('change', updateRoomTypeAndNumber);

    // Optionally, run on page load
    document.addEventListener('DOMContentLoaded', updateRoomTypeAndNumber);
</script>


#####################################################################################
CancelBookReserve

@model IEnumerable<BRMSBS_capstoneproject.Models.BookingModel>

@{
    ViewData["Title"] = "Cancel Booking/Resrvation";
    Layout = "~/Views/Layouts/CancelBookReserveLayout.cshtml";
    var cancelledId = TempData["CancelledBookingId"] as int?;
}

<div class="text-ctr"><b> Choose to cancel the Booking/Reservation </b></div>

<div class="containerbox">
    <table class="table">
        <thead>
            <tr>
                <th>Action</th>
                <th>Booking ID</th>
                <th>Status</th>
                <th>Book/Reserve</th>
                <th>Room Number</th>
                <th>Last Name</th>
                <th>Arrival Date</th>
                <th>Departure Date</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                @foreach (var booking in Model)
                {
                    <tr>
                        <td>
                            <!-- Cancel Button triggers modal -->
                            <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#cancelModal-@booking.Id">
                                Cancel
                            </button>

                            <!-- Info Button -->
                            <button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#infoModal-@booking.Id">
                                Info
                            </button>
                        </td>
                        <td>@booking.Id</td>
                        <td>@booking.Status</td>
                        <td>@booking.BookReserve</td>
                        <td>@booking.RoomNumber</td>
                        <td>@booking.LastName</td>
                        <td>@booking.ArrivalDate.ToString("yyyy-MM-dd")</td>
                        <td>@booking.DepartureDate.ToString("yyyy-MM-dd")</td>

                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="12" class="text-center">No customer data.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Customer Information -->
@foreach (var booking in Model)
{
    <div class="modal fade" id="infoModal-@booking.Id" tabindex="-1" aria-labelledby="infoModalLabel-@booking.Id" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="infoModalLabel-@booking.Id">Customer Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-3">Booking ID</dt>
                        <dd class="col-sm-9">@booking.Id</dd>
                        <dt class="col-sm-3">Status</dt>
                        <dd class="col-sm-9">@booking.Status</dd>
                        <dt class="col-sm-3">Book/Reserve</dt>
                        <dd class="col-sm-9">@booking.BookReserve</dd>
                        <dt class="col-sm-3">First Name</dt>
                        <dd class="col-sm-9">@booking.FirstName</dd>
                        <dt class="col-sm-3">Last Name</dt>
                        <dd class="col-sm-9">@booking.LastName</dd>
                        <dt class="col-sm-3">Middle Initial</dt>
                        <dd class="col-sm-9">@booking.MI</dd>
                        <dt class="col-sm-3">Address</dt>
                        <dd class="col-sm-9">@booking.Address</dd>
                        <dt class="col-sm-3">Email</dt>
                        <dd class="col-sm-9">@booking.Email</dd>
                        <dt class="col-sm-3">Contact Number</dt>
                        <dd class="col-sm-9">@booking.ContactNumber</dd>
                        <dt class="col-sm-3">Nationality</dt>
                        <dd class="col-sm-9">@booking.Nationality</dd>
                        <dt class="col-sm-3">Purpose</dt>
                        <dd class="col-sm-9">@booking.Purpose</dd>
                        <dt class="col-sm-3">Arrival Date</dt>
                        <dd class="col-sm-9">@booking.ArrivalDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Departure Date</dt>
                        <dd class="col-sm-9">@booking.DepartureDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Room Number</dt>
                        <dd class="col-sm-9">@booking.RoomNumber</dd>
                        <dt class="col-sm-3">Room Type</dt>
                        <dd class="col-sm-9">@booking.RoomType</dd>
                        <dt class="col-sm-3">Room Rates</dt>
                        <dd class="col-sm-9">@booking.RoomRates</dd>
                        <dt class="col-sm-3">Number Of Pax</dt>
                        <dd class="col-sm-9">@booking.NumberOfPax</dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Cancel Confirmation -->
@foreach (var booking in Model)
{
    <div class="modal fade" id="cancelModal-@booking.Id" tabindex="-1" aria-labelledby="cancelModalLabel-@booking.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="cancelModalLabel-@booking.Id">Confirm Cancellation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to cancel this booking? <br />
                    This action cannot be undone.
                </div>
                <div class="modal-footer">
                    <form asp-controller="System" asp-action="CancelBooking" method="post" style="display:inline;">
                        <input type="hidden" name="id" value="@booking.Id" />
                        <button type="submit" class="btn btn-danger">Cancel Now</button>
                    </form>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Go Back</button>
                </div>
            </div>
        </div>
    </div>
}

@if (TempData["CancelSuccess"] != null && TempData["CancelledBookingId"] != null)
{
    <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="successModalLabel">Cancellation Successful</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Booking ID <b>@TempData["CancelledBookingId"]</b> has been cancelled successfully.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Show the modal automatically when the page loads
        window.addEventListener('DOMContentLoaded', function () {
            var successModal = new bootstrap.Modal(document.getElementById('successModal'));
            successModal.show();
        });
    </script>
}
#####################################################################################
CheckOut

@model IEnumerable<BRMSBS_capstoneproject.Models.BookingModel>

@{
    ViewData["Title"] = "Check Out";
    Layout = "~/Views/Layouts/CheckOutLayout.cshtml";
}

<div class="text-ctr"><b> Choose to check out the Booking/Reservation </b></div>

<div class="containerbox">

    <table class="table">
        <thead>
            <tr>
                <th>Action</th>
                <th>Booking ID</th>
                <th>Status</th>
                <th>Book/Reserve</th>
                <th>Room Number</th>
                <th>Last Name</th>
                <th>Arrival Date</th>
                <th>Departure Date</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                @foreach (var booking in Model)
                {
                    if (!string.Equals(booking.Status, "pending", StringComparison.OrdinalIgnoreCase))
                    {
                        <tr>
                            <td>
                                <!-- Check Out Button triggers modal -->
                                <button type="button" class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#checkoutPriceModal-@booking.Id">
                                    Check Out
                                </button>

                                <!-- Info Button -->
                                <button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#infoModal-@booking.Id">
                                    Info
                                </button>
                            </td>
                            <td>@booking.Id</td>
                            <td>@booking.Status</td>
                            <td>@booking.BookReserve</td>
                            <td>@booking.RoomNumber</td>
                            <td>@booking.LastName</td>
                            <td>@booking.ArrivalDate.ToString("yyyy-MM-dd")</td>
                            <td>@booking.DepartureDate.ToString("yyyy-MM-dd")</td>
                        </tr>
                    }
                }
            }
            else
            {
                <tr>
                    <td colspan="12" class="text-center">No customer data.</td>
                </tr>
            }
        </tbody>
    </table>

</div>

<!-- Check Out Price Modal -->
@foreach (var booking in Model)
{
    var roomRates = Convert.ToInt32(booking.RoomRates);
    var numberOfPax = Convert.ToInt32(booking.NumberOfPax);
    var paxCharge = numberOfPax * 70;
    var stayingDays = (booking.DepartureDate - booking.ArrivalDate).Days;
    var daysCharge = stayingDays * 70;
    var total = roomRates + paxCharge + daysCharge;
    var vat = total * 0.02;
    var grandTotal = total + vat;
    <div class="modal fade" id="checkoutPriceModal-@booking.Id" tabindex="-1" aria-labelledby="checkoutPriceModalLabel-@booking.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="checkoutPriceModalLabel-@booking.Id">Check Out Price</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-3">Booking ID</dt>
                        <dd class="col-sm-9">@booking.Id</dd>
                        <dt class="col-sm-3">First Name</dt>
                        <dd class="col-sm-9">@booking.FirstName</dd>
                        <dt class="col-sm-3">Last Name</dt>
                        <dd class="col-sm-9">@booking.LastName</dd>
                        <dt class="col-sm-3">Book/Reserve</dt>
                        <dd class="col-sm-9">@booking.BookReserve</dd>
                        <dt class="col-sm-3">Arrival Date</dt>
                        <dd class="col-sm-9">@booking.ArrivalDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Departure Date</dt>
                        <dd class="col-sm-9">@booking.DepartureDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Room Number</dt>
                        <dd class="col-sm-9">@booking.RoomNumber</dd>
                        <dt class="col-sm-3">Room Type</dt>
                        <dd class="col-sm-9">@booking.RoomType</dd>
                    </dl class="row">
                    ----------------------------------------------------------
                    <dl class="row">
                        <dt class="col-sm-5">Room Rates</dt>
                        <dd class="col-sm-7">@roomRates.ToString()</dd>
                        <dt class="col-sm-5">Number of Pax</dt>
                        <dd class="col-sm-7">@numberOfPax x 70 = @paxCharge.ToString()</dd>
                        <dt class="col-sm-5">Staying Days</dt>
                        <dd class="col-sm-7">@stayingDays x 70 = @daysCharge.ToString()</dd>
                        <dt class="col-sm-5">Total</dt>
                        <dd class="col-sm-7"><b>@grandTotal.ToString()</b></dd>
                    </dl>

                    *VAT applies to 2%<br/><br/>
                    <div class="mb-3">
                        <label for="paymentOption-@booking.Id" class="form-label">Payment Option</label>
                        <select class="form-select" id="paymentOption-@booking.Id" name="paymentOption" form="checkoutForm-@booking.Id" required>
                            <option value="">- Select Here -</option>
                            <option value="Cash">Cash</option>
                            <option value="Digital">Digital</option>
                        </select>
                    </div>
                    Do you want to check out this selected booking/reservaton?<br/>
                    This action cannot be undone.
                </div>
                <div class="modal-footer">
                    <form asp-action="CheckOut" asp-controller="System" asp-route-bookingId="@booking.Id" method="post" id="checkoutForm-@booking.Id">
                        <input type="hidden" name="grandTotal" value="@grandTotal" />
                        <!-- Payment option will be submitted via the select above -->
                        <button type="submit" class="btn btn-success">Check Out Now</button>
                    </form>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Customer Information -->
@foreach (var booking in Model)
{
    <div class="modal fade" id="infoModal-@booking.Id" tabindex="-1" aria-labelledby="infoModalLabel-@booking.Id" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="infoModalLabel-@booking.Id">Customer Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-3">Booking ID</dt>
                        <dd class="col-sm-9">@booking.Id</dd>
                        <dt class="col-sm-3">Status</dt>
                        <dd class="col-sm-9">@booking.Status</dd>
                        <dt class="col-sm-3">Book/Reserve</dt>
                        <dd class="col-sm-9">@booking.BookReserve</dd>
                        <dt class="col-sm-3">First Name</dt>
                        <dd class="col-sm-9">@booking.FirstName</dd>
                        <dt class="col-sm-3">Last Name</dt>
                        <dd class="col-sm-9">@booking.LastName</dd>
                        <dt class="col-sm-3">Middle Initial</dt>
                        <dd class="col-sm-9">@booking.MI</dd>
                        <dt class="col-sm-3">Address</dt>
                        <dd class="col-sm-9">@booking.Address</dd>
                        <dt class="col-sm-3">Email</dt>
                        <dd class="col-sm-9">@booking.Email</dd>
                        <dt class="col-sm-3">Contact Number</dt>
                        <dd class="col-sm-9">@booking.ContactNumber</dd>
                        <dt class="col-sm-3">Nationality</dt>
                        <dd class="col-sm-9">@booking.Nationality</dd>
                        <dt class="col-sm-3">Purpose</dt>
                        <dd class="col-sm-9">@booking.Purpose</dd>
                        <dt class="col-sm-3">Arrival Date</dt>
                        <dd class="col-sm-9">@booking.ArrivalDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Departure Date</dt>
                        <dd class="col-sm-9">@booking.DepartureDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Room Number</dt>
                        <dd class="col-sm-9">@booking.RoomNumber</dd>
                        <dt class="col-sm-3">Room Type</dt>
                        <dd class="col-sm-9">@booking.RoomType</dd>
                        <dt class="col-sm-3">Room Rates</dt>
                        <dd class="col-sm-9">@booking.RoomRates</dd>
                        <dt class="col-sm-3">Number Of Pax</dt>
                        <dd class="col-sm-9">@booking.NumberOfPax</dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (TempData["CheckOutSuccess"] != null)
{
    <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="successModalLabel">Success</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    Check Out Successfully and the room status was set to Maintainance.<br/>
                </div>
            </div>
        </div>
    </div>
    <script>
        window.addEventListener('DOMContentLoaded', function () {
            var successModal = new bootstrap.Modal(document.getElementById('successModal'));
            successModal.show();
        });
    </script>
}

#####################################################################################
ManageRooms

@model IEnumerable<BRMSBS_capstoneproject.Models.RoomModel>

@{
    ViewData["Title"] = "Manage Rooms";
    Layout = "~/Views/Layouts/ManageRmLayoutA.cshtml";

    // Count occupied and available rooms
    var occupiedCount = Model?.Count(r => r.Status?.ToLower() == "occupied") ?? 0;
    var availableCount = Model?.Count(r => r.Status?.ToLower() == "available") ?? 0;
    var maintainanceCount = Model?.Count(r => r.Status?.ToLower() == "maintainance") ?? 0;
}

<div class="text-ctr"><b> Manage your rooms </b></div>

<div class="containerbox">
    <h5>Created Rooms: @Model.Count() | Available Rooms: @availableCount | Occupied Rooms: @occupiedCount | Maintainance Rooms: @maintainanceCount</h5>

    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createRoomModal">Create Room and Room Type</button><br />

    *Action buttons are disabled when the room status is occupied. 
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Room Number</th>
                <th>Room Type</th>
                <th>Room Status</th>
				<th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                @foreach (var room in Model)
                {
                    var isOccupied = room.Status?.ToLower() == "occupied";
                    var isMaintainance = room.Status?.ToLower() == "maintainance";
                    var isAvailable = room.Status?.ToLower() == "available";
                    <tr>
                        <td>@room.RoomNumber</td>
                        <td>@room.RoomType</td>
                        <td id="room-status-@room.Id">@room.Status</td>
                        <td>
                            <button type="button"
                                    class="btn btn-sm btn-outline-warning"
                                    data-bs-toggle="modal"
                                    data-bs-target="#editRoomModal"
                                    data-roomid="@room.Id"
                                    data-roomnumber="@room.RoomNumber"
                                    data-roomtype="@room.RoomType"
                                    @(isOccupied ? "disabled" : "")
                                    @(isMaintainance ? "disabled" : "")>
                                Edit
                            </button>
                            <button type="button"
                                    class="btn btn-sm btn-outline-danger ms-1"
                                    data-bs-toggle="modal"
                                    data-bs-target="#deleteRoomModal"
                                    data-roomid="@room.Id"
                                    data-roomnumber="@room.RoomNumber"
                                    data-roomtype="@room.RoomType"
                                    @(isOccupied ? "disabled" : "")
                                    @(isMaintainance ? "disabled" : "")>
                                Delete
                            </button>
                            <form method="post" action="/System/SetRoomAsAvailable" style="display:inline;">
                                    <input type="hidden" name="Id" value="@room.Id" />
                                    <button type="submit"
                                     class="btn btn-sm btn-outline-success ms-1"
                                     @(isAvailable ? "disabled" : "")
                                     @(isOccupied ? "disabled" : "")>
                                    Set as Active
                                </button>
                            </form>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" class="text-center">No rooms created.</td>
                </tr>
            }
        </tbody>
    </table>
</div>





<!-- Create Room and Room Type Modal -->
<div class="modal fade" id="createRoomModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" action="/System/CreateRoomNRoomType">
                <div class="modal-header">
                    <h5 class="modal-title" id="createAccountModalLabel">Create Room Number and Room Type</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Room Number</label>
                        <input type="text" class="form-control" id="roomnumber" name="RoomNumber" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Room Type</label>
                        <select class="form-select" id="roomtype" name="RoomType" required>
                            <option value="">- Select Room Type -</option>
                            <option value="Standard">Standard</option>
                            <option value="Deluxe">Deluxe</option>
                            <option value="Premium">Premium</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Create Room</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Success Popup Modal for Created Room and Room Type -->
<div class="modal fade" id="successRoomModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">Success!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                Your Room and Room Type has been added
            </div>
        </div>
    </div>
</div>

<!-- Edit Room and Room Type Modal -->
<div class="modal fade" id="editRoomModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" action="/System/EditRoomNRoomType">
                <div class="modal-header">
                    <h5 class="modal-title" id="editRoomModalLabel">Edit Room and Room Type</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editRoomId" name="Id" />
                    <div class="mb-3">
                        <label class="form-label">Room Number</label>
                        <input type="text" class="form-control" id="editRoomNumber" name="RoomNumber" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Room Type</label>
                        <select class="form-select" id="editRoomType" name="RoomType" required>
                            <option value="">- Select Room Type -</option>
                            <option value="Standard">Standard</option>
                            <option value="Deluxe">Deluxe</option>
                            <option value="Premium">Premium</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-warning">Save Changes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Success Popup Modal for Edit Room and Room Type -->
<div class="modal fade" id="successEditModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">Success!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                Your Room and Room Type has been updated
            </div>
        </div>
    </div>
</div>

<!-- Delete Account Confirmation Modal -->
<div class="modal fade" id="deleteRoomModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" action="/System/DeleteRoomNRoomType">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteRoomModalLabel">Delete Room</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="deleteRoomId" name="Id" />
                    <p>Are you sure you want to delete the room and your room type? <b id="deleteRoomNumber"></b>?</p>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-danger">Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Success Popup Modal for Delete -->
<div class="modal fade" id="successDeleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">Success!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                Your Room and Room Type has been deleted
            </div>
        </div>
    </div>
</div>

<!-- Success Popup Modal for Set as Active -->
<div class="modal fade" id="successSetActiveModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Success!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                The selected room is ready
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Show success modal if room was created
        window.addEventListener('DOMContentLoaded', function () {
            @if (TempData["RoomCreated"] != null)
            {
                <text>
                var successModal = new bootstrap.Modal(document.getElementById('successRoomModal'));
                successModal.show();
                setTimeout(function () {
                    successModal.hide();
                }, 3000);
                </text>
            }
            @if (TempData["RoomEdited"] != null)
            {
                    <text>
                    var successEditModal = new bootstrap.Modal(document.getElementById('successEditModal'));
                    successEditModal.show();
                    setTimeout(function () {
                        successEditModal.hide();
                    }, 3000);
                    </text>
            }
            @if (TempData["RoomDeleted"] != null)
            {
                    <text>
                    var successDeleteModal = new bootstrap.Modal(document.getElementById('successDeleteModal'));
                    successDeleteModal.show();
                    setTimeout(function () {
                        successDeleteModal.hide();
                    }, 3000);
                    </text>
            }
            @if (TempData["RoomActivated"] != null)
            {
                    <text>
                    var successSetActiveModal = new bootstrap.Modal(document.getElementById('successSetActiveModal'));
                    successSetActiveModal.show();
                    setTimeout(function () {
                        successSetActiveModal.hide();
                    }, 3000);
                    </text>
            }
        });

        // Populate Edit Room Modal with room data
        var editRoomModal = document.getElementById('editRoomModal');
        editRoomModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var roomId = button.getAttribute('data-roomid');
            var roomNumber = button.getAttribute('data-roomnumber');
            var roomType = button.getAttribute('data-roomtype');

            var modalRoomId = editRoomModal.querySelector('#editRoomId');
            var modalRoomNumber = editRoomModal.querySelector('#editRoomNumber');
            var modalRoomType = editRoomModal.querySelector('#editRoomType');

            modalRoomId.value = roomId;
            modalRoomNumber.value = roomNumber;
            // Set the selected value for the dropdown
            for (var i = 0; i < modalRoomType.options.length; i++) {
                if (modalRoomType.options[i].value === roomType) {
                    modalRoomType.selectedIndex = i;
                    break;
                }
            }
        });

         // Populate Delete Room Modal with room data
        var deleteRoomModal = document.getElementById('deleteRoomModal');
        deleteRoomModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var roomId = button.getAttribute('data-roomid');
            var roomNumber = button.getAttribute('data-roomnumber');

            var modalRoomId = deleteRoomModal.querySelector('#deleteRoomId');
            var modalRoomNumber = deleteRoomModal.querySelector('#deleteRoomNumber');

            modalRoomId.value = roomId;
            modalRoomNumber.textContent = roomNumber;
        });
    </script>
}

#####################################################################################
ManageRoomS

@model IEnumerable<BRMSBS_capstoneproject.Models.RoomModel>

@{
    ViewData["Title"] = "Manage Rooms";
    Layout = "~/Views/Layouts/ManageRmLayoutS.cshtml";

    // Count occupied and available rooms
    var occupiedCount = Model?.Count(r => r.Status?.ToLower() == "occupied") ?? 0;
    var availableCount = Model?.Count(r => r.Status?.ToLower() == "available") ?? 0;
    var maintainanceCount = Model?.Count(r => r.Status?.ToLower() == "maintainance") ?? 0;
}

<div class="text-ctr"><b> Manage your rooms </b></div>

<div class="containerbox">
    <h5>Created Rooms: @Model.Count() | Available Rooms: @availableCount | Occupied Rooms: @occupiedCount | Maintainance Rooms: @maintainanceCount</h5>

    <br />

    *Action buttons and create rooms are disabled for staff account. Contact the administrator for request
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Room Number</th>
                <th>Room Type</th>
                <th>Room Status</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                @foreach (var room in Model)
                {
                    var isOccupied = room.Status?.ToLower() == "occupied";
                    var isMaintainance = room.Status?.ToLower() == "maintainance";
                    var isAvailable = room.Status?.ToLower() == "available";
                    <tr>
                        <td>@room.RoomNumber</td>
                        <td>@room.RoomType</td>
                        <td id="room-status-@room.Id">@room.Status</td>   
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" class="text-center">No rooms created.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

#####################################################################################
ManageStaff

@model IEnumerable<BRMSBS_capstoneproject.Models.UserModel>

@{
    ViewData["Title"] = "Manage Staff";
    Layout = "~/Views/Layouts/ManageStaffLayout.cshtml";
}

<div class="text-ctr"><b> Manage your Staff Accounts</b></div>

<div class="containerbox">
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createAccountModal">Create Account</button><br />

    <h5>Created Staff Accounts: @Model.Count() </h5>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Username</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                @foreach (var user in Model)
                {
                    <tr>
                        <td>@user.Username</td>
                        <td>
                            <button type="button"
                                    class="btn btn-sm btn-outline-warning"
                                    data-bs-toggle="modal"
                                    data-bs-target="#editAccountModal"
                                    data-userid="@user.Id"
                                    data-username="@user.Username">
                                Edit
                            </button>
                            <button type="button"
                                    class="btn btn-sm btn-outline-danger ms-1"
                                    data-bs-toggle="modal"
                                    data-bs-target="#deleteAccountModal"
                                    data-userid="@user.Id"
                                    data-username="@user.Username">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="2" class="text-center">No staff accounts created.</td>
                </tr>
            }
        </tbody>
    </table>
</div>






<!-- Create Account Modal -->
<div class="modal fade" id="createAccountModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" action="/System/CreateAccount">
                <div class="modal-header">
                    <h5 class="modal-title" id="createAccountModalLabel">Create Account</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" name="Username" required />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="Password" 
                        required pattern="^(?=.*\d)(?=.*[^\w\s]).{8,}$"
                        title="Password must be at least 8 characters, include a number and a symbol." />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Create Staff Account</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Account Modal -->
<div class="modal fade" id="editAccountModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" action="/System/EditAccount">
                <div class="modal-header">
                    <h5 class="modal-title" id="editAccountModalLabel">Edit Account</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editUserId" name="Id" />
                    <div class="mb-3">
                        <label for="editUsername" class="form-label">Username</label>
                        <input type="text" class="form-control" id="editUsername" name="Username" required />
                    </div>
                    <div class="mb-3">
                        <label for="editPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="editPassword" name="Password"
                               pattern="^(?=.*\d)(?=.*[^\w\s]).{8,}$"
                               title="Password must be at least 8 characters, include a number and a symbol." />
                        <small class="form-text text-muted">Leave blank to keep current password.</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-warning">Save Changes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Account Confirmation Modal -->
<div class="modal fade" id="deleteAccountModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" action="/System/DeleteAccount">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteAccountModalLabel">Delete Account</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="deleteUserId" name="Id" />
                    <p>Are you sure you want to delete the account <b id="deleteUsername"></b>?</p>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-danger">Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Success Popup Modal for Create -->
<div class="modal fade" id="successAccountModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">Success!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                Staff Account has been created
            </div>
        </div>
    </div>
</div>

<!-- Success Popup Modal for Edit -->
<div class="modal fade" id="successEditModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">Success!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                Staff Account has been updated
            </div>
        </div>
    </div>
</div>

<!-- Success Popup Modal for Delete -->
<div class="modal fade" id="successDeleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">Success!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                Staff Account has been deleted
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Show success modal if account was created
        window.addEventListener('DOMContentLoaded', function () {
            @if (TempData["AccountCreated"] != null)
            {
                <text>
                var successModal = new bootstrap.Modal(document.getElementById('successAccountModal'));
                successModal.show();
                setTimeout(function () {
                    successModal.hide();
                }, 3000);
                </text>
            }
            @if (TempData["AccountEdited"] != null)
            {
                <text>
                var successEditModal = new bootstrap.Modal(document.getElementById('successEditModal'));
                successEditModal.show();
                setTimeout(function () {
                    successEditModal.hide();
                }, 3000);
                </text>
            }
            @if (TempData["AccountDeleted"] != null)
            {
                <text>
                var successDeleteModal = new bootstrap.Modal(document.getElementById('successDeleteModal'));
                successDeleteModal.show();
                setTimeout(function () {
                    successDeleteModal.hide();
                }, 3000);
                </text>
            }
        });

        // Populate Edit Account Modal with user data
        var editAccountModal = document.getElementById('editAccountModal');
        editAccountModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var userId = button.getAttribute('data-userid');
            var username = button.getAttribute('data-username');

            var modalUserId = editAccountModal.querySelector('#editUserId');
            var modalUsername = editAccountModal.querySelector('#editUsername');
            var modalPassword = editAccountModal.querySelector('#editPassword');

            modalUserId.value = userId;
            modalUsername.value = username;
            modalPassword.value = '';
        });

        // Populate Delete Account Modal with user data
        var deleteAccountModal = document.getElementById('deleteAccountModal');
        deleteAccountModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var userId = button.getAttribute('data-userid');
            var username = button.getAttribute('data-username');

            var modalUserId = deleteAccountModal.querySelector('#deleteUserId');
            var modalUsername = deleteAccountModal.querySelector('#deleteUsername');

            modalUserId.value = userId;
            modalUsername.textContent = username;
        });
    </script>
}
#####################################################################################
ReservationA

@{
    ViewData["Title"] = "Reservation";
    Layout = "~/Views/Layouts/ReservationLayoutA.cshtml";
    var reservationSuccess = TempData["ReservationSuccess"] as bool?;
    var rooms = ViewBag.Rooms as List<BRMSBS_capstoneproject.Models.RoomModel>;
}

<div class="text-ctr"><b> Add a reservation room</b></div>

<div class="containerbox">
    <form class="formbox" method="post" id="reservationForm" action="/System/ReserveRoom" autocomplete="off">

        <div class="formrow">

            <div class="form-group row mb-3">
                <label for="FirstName" class="col-sm-5 col-form-label">First Name</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="FirstName" name="FirstName" required />
                </div>
            </div>
            <div class="form-group row mb-3">
                <label for="LastName" class="col-sm-5 col-form-label">Last Name</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="LastName" name="LastName" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="MI" class="col-sm-5 col-form-label">M.I.</label>
                <div class="col-sm-3">
                    <input type="text" class="form-control" id="MI" name="MI" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Address" class="col-sm-5 col-form-label">Address</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="Address" name="Address" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Email" class="col-sm-5 col-form-label">Email Address</label>
                <div class="col-sm-7">
                    <input type="email" class="form-control" id="Email" name="Email" required/>
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="ContactNumber" class="col-sm-5 col-form-label">Contact Number</label>
                <div class="col-sm-7">
                    <input type="tel" class="form-control" id="ContactNumber" name="ContactNumber" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Nationality" class="col-sm-5 col-form-label">Nationality</label>
                <div class="col-sm-7">
                    <select class="form-control" id="Nationality" name="Nationality" required>
                        <option value="">-- Select here --</option>
                        <option value="Filipino">Filipino</option>
                        <option value="Others">Others</option>
                    </select>
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Purpose" class="col-sm-5 col-form-label">Purpose</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="Purpose" name="Purpose" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="ArrivalDate" class="col-sm-5 col-form-label">Arrival Date</label>
                <div class="col-sm-7">
                    <input type="date" class="form-control" id="ArrivalDate" name="ArrivalDate" required 
                           value="@DateTime.Now.ToString("yyyy-MM-dd")"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="DepartureDate" class="col-sm-5 col-form-label">Departure Date</label>
                <div class="col-sm-7">
                    <input type="date" class="form-control" id="DepartureDate" name="DepartureDate" required 
                           min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="RoomRates" class="col-sm-5 col-form-label">Room Rates</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomRates" name="RoomRates" required>
                        <option value="">-- Select here --</option>
                        <option value="499">499 - Standard</option>
                        <option value="699">699 - Deluxe</option>
                        <option value="999">999 - Premium</option>
                    </select>
                </div>
            </div>
            <!-- Room Type -->
            <div class="form-group row mb-2">
                <label for="RoomType" class="col-sm-5 col-form-label">Room Type</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomType" name="RoomType" required>
                        <option value="">-- Select here --</option>
                        @if (rooms != null)
                        {
                            foreach (var roomType in rooms.Where(r => r.Status == "Available").Select(r => r.RoomType).Distinct())
                            {
                                <option value="@roomType">@roomType</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <!-- Room Number -->
            <div class="form-group row mb-2">
                <label for="RoomNumber" class="col-sm-5 col-form-label">Room Number</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomNumber" name="RoomNumber" required>
                        <option value="">-- Select here --</option>
                        @if (rooms != null)
                        {
                            foreach (var room in rooms.Where(r => r.Status == "Available"))
                            {
                                <option value="@room.RoomNumber">@room.RoomNumber</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="NumberOfPax" class="col-sm-5 col-form-label">Number of Pax</label>
                <div class="col-sm-7">
                    <input type="number" class="form-control" id="NumberOfPax" name="NumberOfPax" required />
                </div>
            </div>
            <div class="form-group row mb-1">
                <button type="button" class="btn btn-primary" id="reserveNowBtn">Proceed Reservation</button>
            </div>
        </div>      
    </form>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Reservation Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table table-bordered">
                    <tbody>
                        <tr><th>First Name</th><td id="modalFirstName"></td></tr>
                        <tr><th>Last Name</th><td id="modalLastName"></td></tr>
                        <tr><th>M.I.</th><td id="modalMI"></td></tr>
                        <tr><th>Address</th><td id="modalAddress"></td></tr>
                        <tr><th>Email</th><td id="modalEmail"></td></tr>
                        <tr><th>Contact Number</th><td id="modalContactNumber"></td></tr>
                        <tr><th>Nationality</th><td id="modalNationality"></td></tr>
                        <tr><th>Purpose</th><td id="modalPurpose"></td></tr>
                        <tr><th>Arrival Date</th><td id="modalArrivalDate"></td></tr>
                        <tr><th>Departure Date</th><td id="modalDepartureDate"></td></tr>
                        <tr><th>Room Number</th><td id="modalRoomNumber"></td></tr>
                        <tr><th>Room Type</th><td id="modalRoomType"></td></tr>
                        <tr><th>Room Rates</th><td id="modalRoomRates"></td></tr>
                        <tr><th>Number of Pax</th><td id="modalNumberOfPax"></td></tr>
                    </tbody>
                    Do you want to add and confirm this reservation room? Please double check the customer's info.
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmProceedBtn">Reserve Now</button>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">Reservation Successful</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Your reservation has been successfully added.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById('reserveNowBtn').addEventListener('click', function () {
        // Fill modal with form data
        document.getElementById('modalFirstName').textContent = document.getElementById('FirstName').value;
        document.getElementById('modalLastName').textContent = document.getElementById('LastName').value;
        document.getElementById('modalMI').textContent = document.getElementById('MI').value;
        document.getElementById('modalAddress').textContent = document.getElementById('Address').value;

        document.getElementById('modalEmail').textContent = document.getElementById('Email').value;
        document.getElementById('modalContactNumber').textContent = document.getElementById('ContactNumber').value;
        document.getElementById('modalNationality').textContent = document.getElementById('Nationality').value;
        document.getElementById('modalPurpose').textContent = document.getElementById('Purpose').value;
        document.getElementById('modalArrivalDate').textContent = document.getElementById('ArrivalDate').value;
        document.getElementById('modalDepartureDate').textContent = document.getElementById('DepartureDate').value;
        document.getElementById('modalRoomNumber').textContent = document.getElementById('RoomNumber').value;
        document.getElementById('modalRoomType').textContent = document.getElementById('RoomType').value;
        document.getElementById('modalRoomRates').textContent = document.getElementById('RoomRates').value;
        document.getElementById('modalNumberOfPax').textContent = document.getElementById('NumberOfPax').value;

        // Show modal
        var modal = new bootstrap.Modal(document.getElementById('confirmModal'));
        modal.show();
    });

    // On confirm, submit the form
    document.getElementById('confirmProceedBtn').addEventListener('click', function () {
        document.getElementById('reservationForm').submit();
    });

    // Show success modal if booking was successful, auto-close after 5 seconds
    @if (reservationSuccess == true)
    {
            <text>
            document.addEventListener('DOMContentLoaded', function() {
                var modal = new bootstrap.Modal(document.getElementById('successModal'));
                modal.show();
                setTimeout(function() {
                    modal.hide();
                }, 5000);
            });
            </text>
    }

    document.addEventListener('DOMContentLoaded', function () {
        var arrivalInput = document.getElementById('ArrivalDate');
        var departureInput = document.getElementById('DepartureDate');

        function setDepartureMin() {
            // Set min to arrival date or today if not set
            var minDate = arrivalInput.value || arrivalInput.min;
            departureInput.min = minDate;
            // If departure date is before min, reset it
            if (departureInput.value && departureInput.value < minDate) {
                departureInput.value = minDate;
            }
        }

        // Initial set on page load
        setDepartureMin();

        // Update min when arrival date changes
        arrivalInput.addEventListener('change', setDepartureMin);
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var reserveNowBtn = document.getElementById('reserveNowBtn');
        var requiredFields = [
            'FirstName', 'LastName', 'MI', 'Address', 'Email', 'ContactNumber',
            'Nationality', 'Purpose', 'ArrivalDate', 'DepartureDate',
            'RoomNumber', 'RoomType', 'RoomRates', 'NumberOfPax'
        ];

        function checkFormFilled() {
            var allFilled = requiredFields.every(function(id) {
                var el = document.getElementById(id);
                if (!el) return false;
                if (el.tagName === 'SELECT') {
                    return el.value !== '';
                }
                return el.value.trim() !== '';
            });
            reserveNowBtn.disabled = !allFilled;
        }

        // Initial check
        checkFormFilled();

        // Add event listeners to all required fields
        requiredFields.forEach(function(id) {
            var el = document.getElementById(id);
            if (el) {
                el.addEventListener('input', checkFormFilled);
                el.addEventListener('change', checkFormFilled);
            }
        });
    });
</script>



<script>
    document.addEventListener('DOMContentLoaded', function () {
        var today = new Date();
        var todayStr = today.toISOString().split('T')[0];
        var arrivalInput = document.getElementById('ArrivalDate');
        var departureInput = document.getElementById('DepartureDate');

        // Always block past dates for Arrival
        arrivalInput.setAttribute('min', todayStr);

        // Always block past dates for Departure (initially)
        departureInput.setAttribute('min', todayStr);

        function setDepartureMin() {
            var arrivalDate = arrivalInput.value;
            var minDate;
            if (arrivalDate) {
                // Set min to one day after arrival
                var arrDateObj = new Date(arrivalDate);
                arrDateObj.setDate(arrDateObj.getDate() + 1);
                minDate = arrDateObj.toISOString().split('T')[0];
            } else {
                minDate = todayStr;
            }
            departureInput.setAttribute('min', minDate);
            if (departureInput.value < minDate) {
                departureInput.value = minDate;
            }
        }

        // Initial set
        setDepartureMin();

        // Update Departure min when Arrival changes
        arrivalInput.addEventListener('change', setDepartureMin);

        // Prevent manual entry of past dates for Departure
        departureInput.addEventListener('input', function () {
            var minDate = departureInput.getAttribute('min');
            if (departureInput.value < minDate) {
                departureInput.value = minDate;
            }
        });

        // Prevent manual entry of past dates for Arrival
        arrivalInput.addEventListener('input', function () {
            if (arrivalInput.value < todayStr) {
                arrivalInput.value = todayStr;
            }
            setDepartureMin();
        });
    });
</script>
<script>
    // Pass rooms data to JS using System.Text.Json
    var rooms = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Rooms));

    function updateRoomTypeAndNumber() {
        var rate = document.getElementById('RoomRates').value;
        var roomTypeSelect = document.getElementById('RoomType');
        var roomNumberSelect = document.getElementById('RoomNumber');

        let type = '';
        if (rate === '499') type = 'Standard';
        else if (rate === '699') type = 'Deluxe';
        else if (rate === '999') type = 'Premium';

        // Filter available rooms by type
        var availableRooms = rooms.filter(r => r.Status === "Available" && r.RoomType === type);

        // Update RoomType select
        roomTypeSelect.innerHTML = '';
        if (type && availableRooms.length > 0) {
            roomTypeSelect.innerHTML = `<option value="${type}">${type}</option>`;
        } else if (type) {
            roomTypeSelect.innerHTML = `<option value="">Not available</option>`;
        } else {
            roomTypeSelect.innerHTML = `<option value="">*Select Room Rate First</option>`;
        }

        // Update RoomNumber select
        roomNumberSelect.innerHTML = '';
        if (type && availableRooms.length > 0) {
            roomNumberSelect.innerHTML = `<option value="">-- Select room here --</option>`;
            availableRooms.forEach(r => {
                roomNumberSelect.innerHTML += `<option value="${r.RoomNumber}">${r.RoomNumber}</option>`;
            });
        } else if (type) {
            roomNumberSelect.innerHTML = `<option value="">Not available</option>`;
        } else {
            roomNumberSelect.innerHTML = `<option value="">*Select Room Rate First</option>`;
        }
    }

    document.getElementById('RoomRates').addEventListener('change', updateRoomTypeAndNumber);

    // Optionally, run on page load
    document.addEventListener('DOMContentLoaded', updateRoomTypeAndNumber);
</script>

#####################################################################################
ReserveCheckIn

@model IEnumerable<BRMSBS_capstoneproject.Models.BookingModel>

@{
    ViewData["Title"] = "Reservation Check Out";
    Layout = "~/Views/Layouts/ReservationCheckInALayout.cshtml";
    var pendingBookings = Model?.Where(b => b.Status == "Pending") ?? Enumerable.Empty<BRMSBS_capstoneproject.Models.BookingModel>();
}

<div class="text-ctr"><b>Choose to check in the Reservation </b></div>

<div class="containerbox">

    <table class="table">
        <thead>
            <tr>
                <th>Action</th>
                <th>Booking ID</th>
                <th>Status</th>
                <th>Book/Reserve</th>
                <th>Room Number</th>
                <th>Last Name</th>
                <th>Arrival Date</th>
                <th>Departure Date</th>
            </tr>
        </thead>
        <tbody>
            @if (pendingBookings.Any())
            {
                @foreach (var booking in pendingBookings)
                {
                    <tr>
                        <td>
                            <!-- Cancel Button triggers modal -->
                            <button type="button" class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#checkInModal-@booking.Id">
                                Check In
                            </button>

                            <!-- Info Button -->
                            <button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#infoModal-@booking.Id">
                                Info
                            </button>
                        </td>
                        <td>@booking.Id</td>
                        <td>@booking.Status</td>
                        <td>@booking.BookReserve</td>
                        <td>@booking.RoomNumber</td>
                        <td>@booking.LastName</td>
                        <td>@booking.ArrivalDate.ToString("yyyy-MM-dd")</td>
                        <td>@booking.DepartureDate.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="12" class="text-center">No pending reservations.</td>
                </tr>
            }
        </tbody>
    </table>

</div>

<!-- Customer Information -->
@foreach (var booking in pendingBookings)
{
    <div class="modal fade" id="infoModal-@booking.Id" tabindex="-1" aria-labelledby="infoModalLabel-@booking.Id" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="infoModalLabel-@booking.Id">Customer Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-3">Booking ID</dt>
                        <dd class="col-sm-9">@booking.Id</dd>
                        <dt class="col-sm-3">Status</dt>
                        <dd class="col-sm-9">@booking.Status</dd>
                        <dt class="col-sm-3">Book/Reserve</dt>
                        <dd class="col-sm-9">@booking.BookReserve</dd>
                        <dt class="col-sm-3">First Name</dt>
                        <dd class="col-sm-9">@booking.FirstName</dd>
                        <dt class="col-sm-3">Last Name</dt>
                        <dd class="col-sm-9">@booking.LastName</dd>
                        <dt class="col-sm-3">Middle Initial</dt>
                        <dd class="col-sm-9">@booking.MI</dd>
                        <dt class="col-sm-3">Address</dt>
                        <dd class="col-sm-9">@booking.Address</dd>
                        <dt class="col-sm-3">Email</dt>
                        <dd class="col-sm-9">@booking.Email</dd>
                        <dt class="col-sm-3">Contact Number</dt>
                        <dd class="col-sm-9">@booking.ContactNumber</dd>
                        <dt class="col-sm-3">Nationality</dt>
                        <dd class="col-sm-9">@booking.Nationality</dd>
                        <dt class="col-sm-3">Purpose</dt>
                        <dd class="col-sm-9">@booking.Purpose</dd>
                        <dt class="col-sm-3">Arrival Date</dt>
                        <dd class="col-sm-9">@booking.ArrivalDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Departure Date</dt>
                        <dd class="col-sm-9">@booking.DepartureDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Room Number</dt>
                        <dd class="col-sm-9">@booking.RoomNumber</dd>
                        <dt class="col-sm-3">Room Type</dt>
                        <dd class="col-sm-9">@booking.RoomType</dd>
                        <dt class="col-sm-3">Room Rates</dt>
                        <dd class="col-sm-9">@booking.RoomRates</dd>
                        <dt class="col-sm-3">Number Of Pax</dt>
                        <dd class="col-sm-9">@booking.NumberOfPax</dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Cancel Confirmation -->
@foreach (var booking in pendingBookings)
{
    <div class="modal fade" id="checkInModal-@booking.Id" tabindex="-1" aria-labelledby="CheckInModalLabel-@booking.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="checkInModalLabel-@booking.Id">
                        Confirm Check In?
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to set as Check In this selected reservation? <br />
                    This action cannot be undone.
                </div>
                <div class="modal-footer">
                    <form asp-controller="System" asp-action="ReservationCheckIn" method="post" style="display:inline;">
                        <input type="hidden" name="id" value="@booking.Id" />
                        <button type="submit" class="btn btn-success">Check In as reservation</button>
                    </form>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Go Back</button>
                </div>
            </div>
        </div>
    </div>
}

@if (TempData["CheckInSuccess"] != null && TempData["CheckInBookingId"] != null)
{
    <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="successModalLabel">Reservation Check In Successful</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Booking ID <b>@TempData["CheckInBookingId"]</b> has been reservation set to Check In successfully.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Show the modal automatically when the page loads
        window.addEventListener('DOMContentLoaded', function () {
            var successModal = new bootstrap.Modal(document.getElementById('successModal'));
            successModal.show();
        });
    </script>
}

#####################################################################################
ReserveCheckInS

@model IEnumerable<BRMSBS_capstoneproject.Models.BookingModel>

@{
    ViewData["Title"] = "Reservation Check Out";
    Layout = "~/Views/Layouts/ReservationCheckInSLayout.cshtml";
    var pendingBookings = Model?.Where(b => b.Status == "Pending") ?? Enumerable.Empty<BRMSBS_capstoneproject.Models.BookingModel>();
}

<div class="text-ctr"><b>Choose to check in the Reservation </b></div>

<div class="containerbox">

    <table class="table">
        <thead>
            <tr>
                <th>Action</th>
                <th>Booking ID</th>
                <th>Status</th>
                <th>Book/Reserve</th>
                <th>Room Number</th>
                <th>Last Name</th>
                <th>Arrival Date</th>
                <th>Departure Date</th>
            </tr>
        </thead>
        <tbody>
            @if (pendingBookings.Any())
            {
                @foreach (var booking in pendingBookings)
                {
                    <tr>
                        <td>
                            <!-- Cancel Button triggers modal -->
                            <button type="button" class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#checkInModal-@booking.Id">
                                Check In
                            </button>

                            <!-- Info Button -->
                            <button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#infoModal-@booking.Id">
                                Info
                            </button>
                        </td>
                        <td>@booking.Id</td>
                        <td>@booking.Status</td>
                        <td>@booking.BookReserve</td>
                        <td>@booking.RoomNumber</td>
                        <td>@booking.LastName</td>
                        <td>@booking.ArrivalDate.ToString("yyyy-MM-dd")</td>
                        <td>@booking.DepartureDate.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="12" class="text-center">No pending reservations.</td>
                </tr>
            }
        </tbody>
    </table>

</div>

<!-- Customer Information -->
@foreach (var booking in pendingBookings)
{
    <div class="modal fade" id="infoModal-@booking.Id" tabindex="-1" aria-labelledby="infoModalLabel-@booking.Id" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="infoModalLabel-@booking.Id">Customer Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-3">Booking ID</dt>
                        <dd class="col-sm-9">@booking.Id</dd>
                        <dt class="col-sm-3">Status</dt>
                        <dd class="col-sm-9">@booking.Status</dd>
                        <dt class="col-sm-3">Book/Reserve</dt>
                        <dd class="col-sm-9">@booking.BookReserve</dd>
                        <dt class="col-sm-3">First Name</dt>
                        <dd class="col-sm-9">@booking.FirstName</dd>
                        <dt class="col-sm-3">Last Name</dt>
                        <dd class="col-sm-9">@booking.LastName</dd>
                        <dt class="col-sm-3">Middle Initial</dt>
                        <dd class="col-sm-9">@booking.MI</dd>
                        <dt class="col-sm-3">Address</dt>
                        <dd class="col-sm-9">@booking.Address</dd>
                        <dt class="col-sm-3">Email</dt>
                        <dd class="col-sm-9">@booking.Email</dd>
                        <dt class="col-sm-3">Contact Number</dt>
                        <dd class="col-sm-9">@booking.ContactNumber</dd>
                        <dt class="col-sm-3">Nationality</dt>
                        <dd class="col-sm-9">@booking.Nationality</dd>
                        <dt class="col-sm-3">Purpose</dt>
                        <dd class="col-sm-9">@booking.Purpose</dd>
                        <dt class="col-sm-3">Arrival Date</dt>
                        <dd class="col-sm-9">@booking.ArrivalDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Departure Date</dt>
                        <dd class="col-sm-9">@booking.DepartureDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Room Number</dt>
                        <dd class="col-sm-9">@booking.RoomNumber</dd>
                        <dt class="col-sm-3">Room Type</dt>
                        <dd class="col-sm-9">@booking.RoomType</dd>
                        <dt class="col-sm-3">Room Rates</dt>
                        <dd class="col-sm-9">@booking.RoomRates</dd>
                        <dt class="col-sm-3">Number Of Pax</dt>
                        <dd class="col-sm-9">@booking.NumberOfPax</dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Cancel Confirmation -->
@foreach (var booking in pendingBookings)
{
    <div class="modal fade" id="checkInModal-@booking.Id" tabindex="-1" aria-labelledby="CheckInModalLabel-@booking.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="checkInModalLabel-@booking.Id">
                        Confirm Check In?
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to set as Check In this selected reservation? <br />
                    This action cannot be undone.
                </div>
                <div class="modal-footer">
                    <form asp-controller="System" asp-action="ReservationCheckInS" method="post" style="display:inline;">
                        <input type="hidden" name="id" value="@booking.Id" />
                        <button type="submit" class="btn btn-success">Check In as reservation</button>
                    </form>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Go Back</button>
                </div>
            </div>
        </div>
    </div>
}

@if (TempData["CheckInSuccess"] != null && TempData["CheckInBookingId"] != null)
{
    <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="successModalLabel">Reservation Check In Successful</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Booking ID <b>@TempData["CheckInBookingId"]</b> has been reservation set to Check In successfully.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Show the modal automatically when the page loads
        window.addEventListener('DOMContentLoaded', function () {
            var successModal = new bootstrap.Modal(document.getElementById('successModal'));
            successModal.show();
        });
    </script>
}

#####################################################################################
ReservationS

@{
    ViewData["Title"] = "Reservation";
    Layout = "~/Views/Layouts/ReservationLayoutS.cshtml";
    var reservationSuccess = TempData["ReservationSuccess"] as bool?;
    var rooms = ViewBag.Rooms as List<BRMSBS_capstoneproject.Models.RoomModel>;
}

<div class="text-ctr"><b> Add a reservation room</b></div>

<div class="containerbox">
    <form class="formbox" method="post" id="reservationForm" action="/System/ReserveRoomS" autocomplete="off">

        <div class="formrow">

            <div class="form-group row mb-3">
                <label for="FirstName" class="col-sm-5 col-form-label">First Name</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="FirstName" name="FirstName" required />
                </div>
            </div>
            <div class="form-group row mb-3">
                <label for="LastName" class="col-sm-5 col-form-label">Last Name</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="LastName" name="LastName" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="MI" class="col-sm-5 col-form-label">M.I.</label>
                <div class="col-sm-3">
                    <input type="text" class="form-control" id="MI" name="MI" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Address" class="col-sm-5 col-form-label">Address</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="Address" name="Address" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Email" class="col-sm-5 col-form-label">Email Address</label>
                <div class="col-sm-7">
                    <input type="email" class="form-control" id="Email" name="Email" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="ContactNumber" class="col-sm-5 col-form-label">Contact Number</label>
                <div class="col-sm-7">
                    <input type="tel" class="form-control" id="ContactNumber" name="ContactNumber" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Nationality" class="col-sm-5 col-form-label">Nationality</label>
                <div class="col-sm-7">
                    <select class="form-control" id="Nationality" name="Nationality" required>
                        <option value="">-- Select here --</option>
                        <option value="Filipino">Filipino</option>
                        <option value="Others">Others</option>
                    </select>
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="Purpose" class="col-sm-5 col-form-label">Purpose</label>
                <div class="col-sm-7">
                    <input type="text" class="form-control" id="Purpose" name="Purpose" required />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="ArrivalDate" class="col-sm-5 col-form-label">Arrival Date</label>
                <div class="col-sm-7">
                    <input type="date" class="form-control" id="ArrivalDate" name="ArrivalDate" required
                           value="@DateTime.Now.ToString("yyyy-MM-dd")"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="DepartureDate" class="col-sm-5 col-form-label">Departure Date</label>
                <div class="col-sm-7">
                    <input type="date" class="form-control" id="DepartureDate" name="DepartureDate" required
                           min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="RoomRates" class="col-sm-5 col-form-label">Room Rates</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomRates" name="RoomRates" required>
                        <option value="">-- Select here --</option>
                        <option value="499">499 - Standard</option>
                        <option value="699">699 - Deluxe</option>
                        <option value="999">999 - Premium</option>
                    </select>
                </div>
            </div>
            <!-- Room Type -->
            <div class="form-group row mb-2">
                <label for="RoomType" class="col-sm-5 col-form-label">Room Type</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomType" name="RoomType" required>
                        <option value="">-- Select here --</option>
                        @if (rooms != null)
                        {
                            foreach (var roomType in rooms.Where(r => r.Status == "Available").Select(r => r.RoomType).Distinct())
                            {
                                <option value="@roomType">@roomType</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <!-- Room Number -->
            <div class="form-group row mb-2">
                <label for="RoomNumber" class="col-sm-5 col-form-label">Room Number</label>
                <div class="col-sm-7">
                    <select class="form-control" id="RoomNumber" name="RoomNumber" required>
                        <option value="">-- Select here --</option>
                        @if (rooms != null)
                        {
                            foreach (var room in rooms.Where(r => r.Status == "Available"))
                            {
                                <option value="@room.RoomNumber">@room.RoomNumber</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row mb-2">
                <label for="NumberOfPax" class="col-sm-5 col-form-label">Number of Pax</label>
                <div class="col-sm-7">
                    <input type="number" class="form-control" id="NumberOfPax" name="NumberOfPax" required />
                </div>
            </div>
            <div class="form-group row mb-1">
                <button type="button" class="btn btn-primary" id="reserveNowBtn">Proceed Reservation</button>
            </div>
        </div>
    </form>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Reservation Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table table-bordered">
                    <tbody>
                        <tr><th>First Name</th><td id="modalFirstName"></td></tr>
                        <tr><th>Last Name</th><td id="modalLastName"></td></tr>
                        <tr><th>M.I.</th><td id="modalMI"></td></tr>
                        <tr><th>Address</th><td id="modalAddress"></td></tr>
                        <tr><th>Email</th><td id="modalEmail"></td></tr>
                        <tr><th>Contact Number</th><td id="modalContactNumber"></td></tr>
                        <tr><th>Nationality</th><td id="modalNationality"></td></tr>
                        <tr><th>Purpose</th><td id="modalPurpose"></td></tr>
                        <tr><th>Arrival Date</th><td id="modalArrivalDate"></td></tr>
                        <tr><th>Departure Date</th><td id="modalDepartureDate"></td></tr>
                        <tr><th>Room Number</th><td id="modalRoomNumber"></td></tr>
                        <tr><th>Room Type</th><td id="modalRoomType"></td></tr>
                        <tr><th>Room Rates</th><td id="modalRoomRates"></td></tr>
                        <tr><th>Number of Pax</th><td id="modalNumberOfPax"></td></tr>
                    </tbody>
                    Do you want to add and confirm this reservation room? Please double check the customer's info.
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmProceedBtn">Reserve Now</button>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">Reservation Successful</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Your reservation has been successfully added.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById('reserveNowBtn').addEventListener('click', function () {
        // Fill modal with form data
        document.getElementById('modalFirstName').textContent = document.getElementById('FirstName').value;
        document.getElementById('modalLastName').textContent = document.getElementById('LastName').value;
        document.getElementById('modalMI').textContent = document.getElementById('MI').value;
        document.getElementById('modalAddress').textContent = document.getElementById('Address').value;

        document.getElementById('modalEmail').textContent = document.getElementById('Email').value;
        document.getElementById('modalContactNumber').textContent = document.getElementById('ContactNumber').value;
        document.getElementById('modalNationality').textContent = document.getElementById('Nationality').value;
        document.getElementById('modalPurpose').textContent = document.getElementById('Purpose').value;
        document.getElementById('modalArrivalDate').textContent = document.getElementById('ArrivalDate').value;
        document.getElementById('modalDepartureDate').textContent = document.getElementById('DepartureDate').value;
        document.getElementById('modalRoomNumber').textContent = document.getElementById('RoomNumber').value;
        document.getElementById('modalRoomType').textContent = document.getElementById('RoomType').value;
        document.getElementById('modalRoomRates').textContent = document.getElementById('RoomRates').value;
        document.getElementById('modalNumberOfPax').textContent = document.getElementById('NumberOfPax').value;

        // Show modal
        var modal = new bootstrap.Modal(document.getElementById('confirmModal'));
        modal.show();
    });

    // On confirm, submit the form
    document.getElementById('confirmProceedBtn').addEventListener('click', function () {
        document.getElementById('reservationForm').submit();
    });

    // Show success modal if booking was successful, auto-close after 5 seconds
    @if (reservationSuccess == true)
    {
                <text>
                document.addEventListener('DOMContentLoaded', function() {
                    var modal = new bootstrap.Modal(document.getElementById('successModal'));
                    modal.show();
                    setTimeout(function() {
                        modal.hide();
                    }, 5000);
                });
                </text>
    }

    document.addEventListener('DOMContentLoaded', function () {
        var arrivalInput = document.getElementById('ArrivalDate');
        var departureInput = document.getElementById('DepartureDate');

        function setDepartureMin() {
            // Set min to arrival date or today if not set
            var minDate = arrivalInput.value || arrivalInput.min;
            departureInput.min = minDate;
            // If departure date is before min, reset it
            if (departureInput.value && departureInput.value < minDate) {
                departureInput.value = minDate;
            }
        }

        // Initial set on page load
        setDepartureMin();

        // Update min when arrival date changes
        arrivalInput.addEventListener('change', setDepartureMin);
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var reserveNowBtn = document.getElementById('reserveNowBtn');
        var requiredFields = [
            'FirstName', 'LastName', 'MI', 'Address', 'Email', 'ContactNumber',
            'Nationality', 'Purpose', 'ArrivalDate', 'DepartureDate',
            'RoomNumber', 'RoomType', 'RoomRates', 'NumberOfPax'
        ];

        function checkFormFilled() {
            var allFilled = requiredFields.every(function(id) {
                var el = document.getElementById(id);
                if (!el) return false;
                if (el.tagName === 'SELECT') {
                    return el.value !== '';
                }
                return el.value.trim() !== '';
            });
            reserveNowBtn.disabled = !allFilled;
        }

        // Initial check
        checkFormFilled();

        // Add event listeners to all required fields
        requiredFields.forEach(function(id) {
            var el = document.getElementById(id);
            if (el) {
                el.addEventListener('input', checkFormFilled);
                el.addEventListener('change', checkFormFilled);
            }
        });
    });
</script>



<script>
    document.addEventListener('DOMContentLoaded', function () {
        var today = new Date();
        var todayStr = today.toISOString().split('T')[0];
        var arrivalInput = document.getElementById('ArrivalDate');
        var departureInput = document.getElementById('DepartureDate');

        // Always block past dates for Arrival
        arrivalInput.setAttribute('min', todayStr);

        // Always block past dates for Departure (initially)
        departureInput.setAttribute('min', todayStr);

        function setDepartureMin() {
            var arrivalDate = arrivalInput.value;
            var minDate;
            if (arrivalDate) {
                // Set min to one day after arrival
                var arrDateObj = new Date(arrivalDate);
                arrDateObj.setDate(arrDateObj.getDate() + 1);
                minDate = arrDateObj.toISOString().split('T')[0];
            } else {
                minDate = todayStr;
            }
            departureInput.setAttribute('min', minDate);
            if (departureInput.value < minDate) {
                departureInput.value = minDate;
            }
        }

        // Initial set
        setDepartureMin();

        // Update Departure min when Arrival changes
        arrivalInput.addEventListener('change', setDepartureMin);

        // Prevent manual entry of past dates for Departure
        departureInput.addEventListener('input', function () {
            var minDate = departureInput.getAttribute('min');
            if (departureInput.value < minDate) {
                departureInput.value = minDate;
            }
        });

        // Prevent manual entry of past dates for Arrival
        arrivalInput.addEventListener('input', function () {
            if (arrivalInput.value < todayStr) {
                arrivalInput.value = todayStr;
            }
            setDepartureMin();
        });
    });
</script>
<script>
    // Pass rooms data to JS using System.Text.Json
    var rooms = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Rooms));

    function updateRoomTypeAndNumber() {
        var rate = document.getElementById('RoomRates').value;
        var roomTypeSelect = document.getElementById('RoomType');
        var roomNumberSelect = document.getElementById('RoomNumber');

        let type = '';
        if (rate === '499') type = 'Standard';
        else if (rate === '699') type = 'Deluxe';
        else if (rate === '999') type = 'Premium';

        // Filter available rooms by type
        var availableRooms = rooms.filter(r => r.Status === "Available" && r.RoomType === type);

        // Update RoomType select
        roomTypeSelect.innerHTML = '';
        if (type && availableRooms.length > 0) {
            roomTypeSelect.innerHTML = `<option value="${type}">${type}</option>`;
        } else if (type) {
            roomTypeSelect.innerHTML = `<option value="">Not available</option>`;
        } else {
            roomTypeSelect.innerHTML = `<option value="">*Select Room Rate First</option>`;
        }

        // Update RoomNumber select
        roomNumberSelect.innerHTML = '';
        if (type && availableRooms.length > 0) {
            roomNumberSelect.innerHTML = `<option value="">-- Select room here --</option>`;
            availableRooms.forEach(r => {
                roomNumberSelect.innerHTML += `<option value="${r.RoomNumber}">${r.RoomNumber}</option>`;
            });
        } else if (type) {
            roomNumberSelect.innerHTML = `<option value="">Not available</option>`;
        } else {
            roomNumberSelect.innerHTML = `<option value="">*Select Room Rate First</option>`;
        }
    }

    document.getElementById('RoomRates').addEventListener('change', updateRoomTypeAndNumber);

    // Optionally, run on page load
    document.addEventListener('DOMContentLoaded', updateRoomTypeAndNumber);
</script>

#####################################################################################
SalesReports

@model List<BRMSBS_capstoneproject.Models.CustomerModel>
@{
    ViewData["Title"] = "Sales Reports";
    Layout = "~/Views/Layouts/SalesReportsLayout.cshtml";
    var modalCustomerId = -1;

    var totalBooked = Model.Count(c => c.Status == "Purchased" && c.BookReserve == "Booking");
    var totalReserved = Model.Count(c => c.Status == "Purchased" && c.BookReserve == "Reservation");
    var totalCancelled = Model.Count(c => c.Status == "Cancelled");
}
<div class="text-ctr"><b> Sales Reports </b></div>

<div class="containerbox" id="reportContent">
    <h3>
        Total Lists: @Model.Count() |
        Total Booked: @totalBooked |
        Total Reserved: @totalReserved |
        Total Cancelled: @totalCancelled
    </h3>

    <br/>

    <button type="button" class="btn btn-success" id="printReportBtn" onclick="printReport()">Print Report</button>

    <br/>

    <div class="containerbox-2">
        <table class="table">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>ID</th>
                    <th>Status</th>
                    <th>Submited Date and Time</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Room Number</th>
                    <th>Room Type</th>
                    <th>Grand Amount</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    @foreach (var customer in Model)
                    {
                        <tr>
                            <td>
                                <button type="button" class="btn btn-outline-success" onclick="showOptionsModal(@customer.Id, '@customer.FirstName', '@customer.LastName')">
                                    Options
                                </button>
                            </td>
                            <td>@customer.Id</td>
                            <td>@customer.Status</td>
                            <td>@customer.CheckOutDateTime</td>
                            <td>@customer.FirstName</td>
                            <td>@customer.LastName</td>
                            <td>@customer.RoomNumber</td>
                            <td>@customer.RoomType</td>
                            <td>@customer.GrandAmount.ToString("C")</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="12" class="text-center">No purchase/cancellation history data.</td>
                    </tr>
                } 
            </tbody>
        </table>
    </div>
</div>

<!-- Modal Popup (outside table code) -->
<div class="modal fade" id="optionsModal" tabindex="-1" aria-labelledby="optionsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="optionsModalLabel">Options</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div id="modalCustomerName"></div>
                <button type="button" class="btn btn-primary" id="viewDetailsBtn" onclick="showDetailsModal()">View Details</button>
                <button type="button" class="btn btn-danger" onclick="showDeleteConfirmModal()">Delete this data</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p>Are you sure you want to delete this data?<br/>
                    This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <form id="deleteForm" method="post" asp-action="DeleteCustomer" asp-controller="System">
                    <input type="hidden" name="customerId" id="deleteCustomerId" value="" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@foreach (var customer in Model.Where(c => c.Status == "Purchased" || c.Status == "Cancelled"))
{
    var roomRates = Convert.ToInt32(customer.RoomRates);
    var numberOfPax = Convert.ToInt32(customer.NumberOfPax);
    var paxCharge = numberOfPax * 70;
    var stayingDays = (customer.DepartureDate - customer.ArrivalDate).Days;
    var daysCharge = stayingDays * 70;
    var total = roomRates + paxCharge + daysCharge;
    var vat = total * 0.02;
    var grandTotal = total + vat;
    <div class="modal fade" id="detailsModal-@customer.Id" tabindex="-1" aria-labelledby="detailsModalLabel-@customer.Id" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" id="printContent-@customer.Id">
                <div class="modal-header">
                    <div id="printHeader-@customer.Id">
                        <h5 class="modal-title" id="detailsModalLabel-@customer.Id">Room Rate Details</h5>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-3">First Name</dt>
                        <dd class="col-sm-9">@customer.FirstName</dd>
                        <dt class="col-sm-3">Last Name</dt>
                        <dd class="col-sm-9">@customer.LastName</dd>
                        <dt class="col-sm-3">MI</dt>
                        <dd class="col-sm-9">@customer.MI</dd>
                        <dt class="col-sm-3">Address</dt>
                        <dd class="col-sm-9">@customer.Address</dd>
                        <dt class="col-sm-3">Email</dt>
                        <dd class="col-sm-9">@customer.Email</dd>
                        <dt class="col-sm-3">Contact Number</dt>
                        <dd class="col-sm-9">@customer.ContactNumber</dd>
                        <dt class="col-sm-3">Nationality</dt>
                        <dd class="col-sm-9">@customer.Nationality</dd>
                        <dt class="col-sm-3">Purpose</dt>
                        <dd class="col-sm-9">@customer.Purpose</dd>
                    </dl class="row">

                    ------------------------------------------------------------------

                    <dl class="row">
                        <dt class="col-sm-3">Arrival Date</dt>
                        <dd class="col-sm-9">@customer.ArrivalDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Departure Date</dt>
                        <dd class="col-sm-9">@customer.DepartureDate.ToString("yyyy-MM-dd")</dd>
                        <dt class="col-sm-3">Room Number</dt>
                        <dd class="col-sm-9">@customer.RoomNumber</dd>
                        <dt class="col-sm-3">Room Type</dt>
                        <dd class="col-sm-9">@customer.RoomType</dd>
                    </dl>

                    ------------------------------------------------------------------

                    <dl class="row">
                        <dt class="col-sm-3">Status</dt>
                        <dd class="col-sm-9">@customer.Status</dd>
                        <dt class="col-sm-3">Mode of Payment</dt>
                        <dd class="col-sm-9">@customer.Payment</dd>
                        <dt class="col-sm-3">Book/Reserve</dt>
                        <dd class="col-sm-9">@customer.BookReserve</dd>
                        <dt class="col-sm-3">Submitted ID</dt>
                        <dd class="col-sm-9">@customer.Id</dd>
                        <dt class="col-sm-3">Submitted Check Out/Cancellation</dt>
                        <dd class="col-sm-9">@customer.CheckOutDateTime</dd>
                    </dl>

                    ------------------------------------------------------------------

                    <dl class="row">       
                        <dt class="col-sm-5">Room Rates</dt>
                        <dd class="col-sm-9">@roomRates.ToString()</dd>
                        <dt class="col-sm-5">Number of Pax</dt>
                        <dd class="col-sm-9">@numberOfPax x 70 = @paxCharge.ToString()</dd>
                        <dt class="col-sm-5">Staying Days</dt>
                        <dd class="col-sm-9">@stayingDays x 70 = @daysCharge.ToString()</dd>
                        <dt class="col-sm-5">Total</dt>
                        <dd class="col-sm-9"><b>@grandTotal.ToString()</b></dd>
                    </dl>
                    <small>*VAT applies to 2%</small>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-secondary" onclick="printDetails('printContent-@customer.Id')">Print</button>
                </div>
            </div>
        </div>
    </div>
}

@if (TempData["CustomerDeleted"] != null)
{
    <div class="modal fade" id="deleteSuccessModal" tabindex="-1" aria-labelledby="deleteSuccessModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="deleteSuccessModalLabel">Success</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    Customer data has been deleted successfully.
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var modal = new bootstrap.Modal(document.getElementById('deleteSuccessModal'));
            modal.show();
            setTimeout(function () {
                modal.hide();
            }, 2000);
        });
    </script>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        var selectedCustomerId = null;

        function showOptionsModal(customerId, firstName, lastName) {
            selectedCustomerId = customerId;
            var modal = new bootstrap.Modal(document.getElementById('optionsModal'));
            modal.show();
        }

        function showDetailsModal() {
            if (selectedCustomerId !== null) {
                var detailsModal = new bootstrap.Modal(document.getElementById('detailsModal-' + selectedCustomerId));
                detailsModal.show();
            }
        }

        function showDeleteConfirmModal() {
            if (selectedCustomerId !== null) {
                document.getElementById('deleteCustomerId').value = selectedCustomerId;
                var deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
                deleteModal.show();
            }
        }

        function printDetails(contentId) {
            var printContent = document.getElementById(contentId);

            // Swap header to custom receipt info if header exists
            var headerDiv = printContent.querySelector('[id^="printHeader-"]');
            var originalHeader = headerDiv ? headerDiv.innerHTML : null;
            if (headerDiv) {
                headerDiv.innerHTML = `
                    <div style="text-align:center;">
                        <h2>Balay Sidlakan Inc.<br/>Hotel and Lodging</h2>
                        <div>DS Regner Bldg. 92-C East Capitol Road<br/>Cebu City</div>
                        <hr>
                    </div>

                    <h2>Customer Receipt</h2>
                `;
            }

            // Hide modal-footer buttons before printing
            var modalFooter = printContent.querySelector('.modal-footer');
            if (modalFooter) {
                var buttons = modalFooter.querySelectorAll('button');
                buttons.forEach(btn => btn.style.display = 'none');
            }

            // Print logic
            var printContents = printContent.innerHTML;
            var originalContents = document.body.innerHTML;
            document.body.innerHTML = printContents;
            window.print();
            document.body.innerHTML = originalContents;
            location.reload();

            // Restore original header
            if (headerDiv && originalHeader) {
                headerDiv.innerHTML = originalHeader;
            }
        }

        function printReport() {
            var printBtn = document.getElementById('printReportBtn');
            printBtn.style.display = 'none';
            window.print();
            printBtn.style.display = '';
        }
    </script>
}

#####################################################################################
HomeDashboardAdmin

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Layouts/HomeDashboardLayoutA.cshtml";
}

<div class="text-ctr"><b> Menu </b></div>

<div class="containerbox">

    <div class="container-fluid dashboard-container">
        <div class="row w-90">
            <div class="col-12">
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 ">
                    <div class="col">
                        <a href="/Functions/BookingA" class="btn btn-primary dashboard-button w-100">
                            <div class="icon7"></div>
                            Booking
                        </a>
                    </div>
                    <div class="col">
                        <a href="/Functions/ReservationA" class="btn btn-primary dashboard-button w-100">
                            <div class="icon8"></div>
                            Reservation
                        </a>
                    </div>
                    <div class="col">
                        <a href="/Functions/ReservationCheckInA" class="btn btn-primary dashboard-button w-100">
                            <div class="icon7"></div>
                            Reservation Check In
                        </a>
                    </div>
                    <div class="col">
                        <a href="/Functions/CheckOut" class="btn btn-primary dashboard-button w-100">
                            <div class="icon1"></div>
                            Check Out
                        </a>
                    </div>
                    <div class="col">
                        <a href="/Functions/CancelBookReserve" class="btn btn-primary dashboard-button w-100">
                            <div class="icon6"></div>
                            Cancel Book/Reserve
                        </a>
                    </div>
                    <div class="col">
                        <a href="/Functions/ManageRoomsA" class="btn btn-primary dashboard-button w-100">
                            <div class="icon2"></div>
                            Manage Rooms
                        </a>
                    </div>
                    
                    <div class="col">
                        <a href="/Functions/ManageStaff" class="btn btn-primary dashboard-button w-100">
                            <div class="icon4"></div>
                            Manage Staff Accounts
                        </a>
                    </div>
                    <div class="col">
                        <a href="/Functions/SalesReports" class="btn btn-primary dashboard-button w-100">
                            <div class="icon5"></div>
                            Sales Reports
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<!--

<div class="col">
                        <a href="/Functions/CalendarIntergrationA" class="btn btn-primary dashboard-button w-100">
                            <div class="icon3"></div>
                            Calendar Intergration
                        </a>
                    </div>

-->

#####################################################################################
HomeDashboardStaff

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Layouts/HomeDashboardLayoutS.cshtml";
}

<div class="text-ctr"><b> Dashboard Menu </b></div>

<div class="containerbox">

    <div class="container-fluid dashboard-container">
        <div class="row w-90">
            <div class="col-12">
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 ">
                    <div class="col">
                        <a href="/Functions/BookingS" class="btn btn-primary dashboard-button w-100">
                            <div class="icon7"></div>
                            Booking
                        </a>
                    </div>
                    <div class="col">
                        <a href="/Functions/ReservationS" class="btn btn-primary dashboard-button w-100">
                            <div class="icon8"></div>
                            Reservation
                        </a>
                    </div>
                    <div class="col">
                        <a href="/Functions/ReservationCheckInS" class="btn btn-primary dashboard-button w-100">
                            <div class="icon7"></div>
                            Reservation Check In
                        </a>
                    </div>
                    <div class="col">
                        <a href="/Functions/ManageRoomsS" class="btn btn-primary dashboard-button w-100">
                            <div class="icon2"></div>
                            Manage Rooms
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

#####################################################################################
Login

@{
    ViewData["Title"] = "Login";
    Layout = "~/Views/Layouts/LoginLayout.cshtml";
}

<div class="login-backV">

    <div class="login-containerbox">

        <div class="containerbox">
            <h2><b> BRMSBS </b></h2>
            <p>Booking & Reservation Management<br /> System For Balay Sidlakan </p>
        </div>
            
        <p> Please login your account (admin and staff) </p>
        @if (ViewBag.LoginError != null)
        {
            <div class="error-text" style="color:red; margin-top:10px;">
                @ViewBag.LoginError
            </div>
        }
        <form asp-action="Login" method="post">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" class="form-control" name="username" required />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" name="password" required />
            </div>
            <br/>
            <button type="submit" class="btn btn-custom">Login</button>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // Push the current state to the history stack
        window.history.pushState(null, null, window.location.href);

        // Handle popstate event (triggered by back/forward buttons)
        window.onpopstate = function () {
            // Push the current state again to prevent navigation
            window.history.pushState(null, null, window.location.href);
        };
    </script>
}

#####################################################################################
Layouts
#####################################################################################
BookingA
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/bookingstyleA.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardAdmin", "System")
                @Html.ActionLink("Booking", "BookingA", "Functions")
                @Html.ActionLink("Reservation", "ReservationA", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInA", "Functions")
                @Html.ActionLink("Check Out", "CheckOut", "Functions")
                @Html.ActionLink("Cancel Book/Reserve", "CancelBookReserve", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsA", "Functions")
                @Html.ActionLink("Manage Staff Accounts", "ManageStaff", "Functions")
                @Html.ActionLink("Sales Reports", "SalesReports", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Booking</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
#####################################################################################
BookingLayoutS

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/bookingstyleS.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardStaff", "System")
                @Html.ActionLink("Booking", "BookingS", "Functions")
                @Html.ActionLink("Reservation", "ReservationS", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInS", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsS", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Booking</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

#####################################################################################
CalendarIntegrationA

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/calendarintstyle.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardAdmin", "System")
                @Html.ActionLink("Booking", "BookingA", "Functions")
                @Html.ActionLink("Reservation", "ReservationA", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInA", "Functions")
                @Html.ActionLink("Check Out", "CheckOut", "Functions")
                @Html.ActionLink("Cancel Book/Reserve", "CancelBookReserve", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsA", "Functions")
                @Html.ActionLink("Manage Staff Accounts", "ManageStaff", "Functions")
                @Html.ActionLink("Sales Reports", "SalesReports", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Calendar Intergration</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>


#####################################################################################
CancelBookReserveLayout

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/cancelbrstyle.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardAdmin", "System")
                @Html.ActionLink("Booking", "BookingA", "Functions")
                @Html.ActionLink("Reservation", "ReservationA", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInA", "Functions")
                @Html.ActionLink("Check Out", "CheckOut", "Functions")
                @Html.ActionLink("Cancel Book/Reserve", "CancelBookReserve", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsA", "Functions")
                @Html.ActionLink("Manage Staff Accounts", "ManageStaff", "Functions")
                @Html.ActionLink("Sales Reports", "SalesReports", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Cancel Booking/Reservation</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>


#####################################################################################
CheckOutLayout

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/checkoutstyle.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardAdmin", "System")
                @Html.ActionLink("Booking", "BookingA", "Functions")
                @Html.ActionLink("Reservation", "ReservationA", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInA", "Functions")
                @Html.ActionLink("Check Out", "CheckOut", "Functions")
                @Html.ActionLink("Cancel Book/Reserve", "CancelBookReserve", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsA", "Functions")
                @Html.ActionLink("Manage Staff Accounts", "ManageStaff", "Functions")
                @Html.ActionLink("Sales Reports", "SalesReports", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Check Out</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

#####################################################################################
HomeDashboardLayoutA

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/homedashbstyleA.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">
            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Booking", "BookingA", "Functions")
                @Html.ActionLink("Reservation", "ReservationA", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInA", "Functions")
                @Html.ActionLink("Check Out", "CheckOut", "Functions")
                @Html.ActionLink("Cancel Book/Reserve", "CancelBookReserve", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsA", "Functions")
                @Html.ActionLink("Manage Staff Accounts", "ManageStaff", "Functions")
                @Html.ActionLink("Sales Reports", "SalesReports", "Functions")
            </div>


            <div class="container-fluid">
                <a class="navbar-brand">Welcome! Administrator</a>
            </div>
            <form asp-controller="System" asp-action="Logout" method="post">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
            <br/>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

#####################################################################################
HomeDashboardLayoutS

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/homedashbstyleS.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Booking", "BookingS", "Functions")
                @Html.ActionLink("Reservation", "ReservationS", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInS", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsS", "Functions")
            </div>

            
            <div class="container-fluid">
                <a class="navbar-brand">Welcome! Staff</a>
            </div>
            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>


#####################################################################################
LoginLayout

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/loginstyle.css" asp-append-version="true" />
</head>
<body>

    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

#####################################################################################
ManageRoomsLayoutA

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/managermstyleA.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardAdmin", "System")
                @Html.ActionLink("Booking", "BookingA", "Functions")
                @Html.ActionLink("Reservation", "ReservationA", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInA", "Functions")
                @Html.ActionLink("Check Out", "CheckOut", "Functions")
                @Html.ActionLink("Cancel Book/Reserve", "CancelBookReserve", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsA", "Functions")
                @Html.ActionLink("Manage Staff Accounts", "ManageStaff", "Functions")
                @Html.ActionLink("Sales Reports", "SalesReports", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Manage Rooms</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>


#####################################################################################
ManageRoomsLayoutS

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/managermstyleS.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardStaff", "System")
                @Html.ActionLink("Booking", "BookingS", "Functions")
                @Html.ActionLink("Reservation", "ReservationS", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInS", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsS", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Manage Rooms</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>


#####################################################################################
ManageStaffLayout

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/managestaffstyle.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardAdmin", "System")
                @Html.ActionLink("Booking", "BookingA", "Functions")
                @Html.ActionLink("Reservation", "ReservationA", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInA", "Functions")
                @Html.ActionLink("Check Out", "CheckOut", "Functions")
                @Html.ActionLink("Cancel Book/Reserve", "CancelBookReserve", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsA", "Functions")
                @Html.ActionLink("Manage Staff Accounts", "ManageStaff", "Functions")
                @Html.ActionLink("Sales Reports", "SalesReports", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Manage Staff</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

#####################################################################################
ReservationCheckInLayoutA

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/reservationcheckinstyleA.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardAdmin", "System")
                @Html.ActionLink("Booking", "BookingA", "Functions")
                @Html.ActionLink("Reservation", "ReservationA", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInA", "Functions")
                @Html.ActionLink("Check Out", "CheckOut", "Functions")
                @Html.ActionLink("Cancel Book/Reserve", "CancelBookReserve", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsA", "Functions")
                @Html.ActionLink("Manage Staff Accounts", "ManageStaff", "Functions")
                @Html.ActionLink("Sales Reports", "SalesReports", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Reservation Check In</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

#####################################################################################
ReservationCheckInLayoutS

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/reservationcheckinstyleS.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardStaff", "System")
                @Html.ActionLink("Booking", "BookingS", "Functions")
                @Html.ActionLink("Reservation", "ReservationS", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInS", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsS", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Reservation Check In</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

#####################################################################################
ReservationLayoutA

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/reservationstyleA.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardAdmin", "System")
                @Html.ActionLink("Booking", "BookingA", "Functions")
                @Html.ActionLink("Reservation", "ReservationA", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInA", "Functions")
                @Html.ActionLink("Check Out", "CheckOut", "Functions")
                @Html.ActionLink("Cancel Book/Reserve", "CancelBookReserve", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsA", "Functions")
                @Html.ActionLink("Manage Staff Accounts", "ManageStaff", "Functions")
                @Html.ActionLink("Sales Reports", "SalesReports", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Reservation</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

#####################################################################################
ReservationLayoutS

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/reservationstyleS.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardStaff", "System")
                @Html.ActionLink("Booking", "BookingS", "Functions")
                @Html.ActionLink("Reservation", "ReservationS", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInS", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsS", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Reservation</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

#####################################################################################
SalesLayout

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BRMSBS_capstoneproject</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/salesreportsstyle.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light custom-navbar border-bottom box-shadow mb-3">

            <!-- Hamburger menu icon -->
            <div class="hamburger" onclick="toggleNav()">&#9776;</div>

            <!-- Sidebar navigation -->
            <div class="sidebar" id="sidebar">
                <span class="close-btn" onclick="toggleNav()">&times;</span>
                @Html.ActionLink("Home Dashboard", "HomeDashboardAdmin", "System")
                @Html.ActionLink("Booking", "BookingA", "Functions")
                @Html.ActionLink("Reservation", "ReservationA", "Functions")
                @Html.ActionLink("Reservation Check In", "ReservationCheckInA", "Functions")
                @Html.ActionLink("Check Out", "CheckOut", "Functions")
                @Html.ActionLink("Cancel Book/Reserve", "CancelBookReserve", "Functions")
                @Html.ActionLink("Manage Rooms", "ManageRoomsA", "Functions")
                @Html.ActionLink("Manage Staff Accounts", "ManageStaff", "Functions")
                @Html.ActionLink("Sales Reports", "SalesReports", "Functions")
            </div>

            <div class="container-fluid d-flex align-items-center">
                <a class="navbar-brand">Sales Reports</a>
            </div>

            <form asp-controller="System" asp-action="Logout" method="post" style="display:inline;">
                <button type="submit" class="btn custom-logout-btn">Logout</button>
            </form>
        </nav>
    </header>
    <div>
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // JavaScript to toggle the sidebar
        function toggleNav() {
            var sidebar = document.getElementById("sidebar");
            var content = document.getElementById("content");
            sidebar.classList.toggle("open");
            content.classList.toggle("shift");
        }
    </script>


    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
#####################################################################################
CSS Stylesheets
#####################################################################################
bookingstyle.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width:1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label
{
    text-align:right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }




#####################################################################################
bookingstyleA.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
calendarintstyle.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }



#####################################################################################
cancelbrstyle.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
checkoutstyle.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
homedashbstyleA.css

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;

}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


.text-ctr {
    text-align:center;
    font-size:70px;
}

.dashboard-container {
    min-height: 20vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.dashboard-button {
    height: 180px;
    font-size: 1.2rem;
    margin: 15px;
    border-radius: 10px;
    transition: transform 0.2s;
    background-color: #FF7601;
    border-color: white ;
}

.dashboard-button:hover {
    background-color: #F2A83E;
    border-color: white;
}

.icon1 {
    width: 90px;
    height: 90px;
    background-image: url('images/check.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon2 {
    width: 90px;
    height: 90px;
    background-image: url('images/bed.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon3 {
    width: 90px;
    height: 90px;
    background-image: url('images/calendar.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon4 {
    width: 90px;
    height: 90px;
    background-image: url('images/accountsettings.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon5 {
    width: 90px;
    height: 90px;
    background-image: url('images/columnchart.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon6 {
    width: 90px;
    height: 90px;
    background-image: url('images/cancel.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon7 {
    width: 90px;
    height: 90px;
    background-image: url('images/book.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon8 {
    width: 90px;
    height: 90px;
    background-image: url('images/reserve.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

/* -------------------------------------------- */

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

.containerbox {
    background-color: #F5E7CC;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}



#####################################################################################
homedashbstyleS.css

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


.text-ctr {
    text-align: center;
    font-size: 70px;
}

.dashboard-container {
    min-height: 20vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.dashboard-button {
    height: 180px;
    font-size: 1.2rem;
    margin: 15px;
    border-radius: 10px;
    transition: transform 0.2s;
    background-color: #FF7601;
    border-color: white;
}

    .dashboard-button:hover {
        background-color: #F2A83E;
        border-color: white;
    }

.icon1 {
    width: 90px;
    height: 90px;
    background-image: url('images/check.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon2 {
    width: 90px;
    height: 90px;
    background-image: url('images/bed.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon3 {
    width: 90px;
    height: 90px;
    background-image: url('images/calendar.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon4 {
    width: 90px;
    height: 90px;
    background-image: url('images/accountsettings.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon5 {
    width: 90px;
    height: 90px;
    background-image: url('images/columnchart.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon6 {
    width: 90px;
    height: 90px;
    background-image: url('images/cancel.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon7 {
    width: 90px;
    height: 90px;
    background-image: url('images/book.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

.icon8 {
    width: 90px;
    height: 90px;
    background-image: url('images/reserve.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin: 20px auto;
}

/* -------------------------------------------- */

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

.containerbox {
    background-color: #F5E7CC;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}


#####################################################################################
loginstyle.css

body {
    margin: 0;
    padding: 0;
    overflow: hidden;
}

.login-backV {
    background-image: url('/css/images/bg1.png');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    height: 100vh;
    width: 100vw;
    box-sizing: border-box;
}

.login-containerbox {
    background-color: white;
    text-align: center;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 500px;
    width: 50%;
    opacity: .9;
}

.containerbox {
    background-color:#EF6301;
    color: black;
    text-align: center;
    padding: 5px;
    border-radius: 10px;
    opacity: .9;
}

.btn-custom {
    background-color: #EF6301;
}


#####################################################################################
managemstyleA.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
managermstyleS.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
managestaffstyle.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width:1800px;
    width: 30%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
reservationcheckinstyleA.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
reservationcheckinstyleS.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
reservationcheckinstyleA.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
reservationcheckinstyleS.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
reservationstyleA.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
reservationstyleS.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }




#####################################################################################
salesreportstyle.css

/* Styling the sidebar */
.sidebar {
    height: 100vh;
    width: 0;
    position: fixed;
    top: 0;
    left: 0;
    background-color: #2B1F14;
    overflow-x: hidden;
    transition: 0.3s;
    padding-top: 60px;
}

    /* Styling sidebar links */
    .sidebar a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 18px;
        color: #f1f1f5;
        display: block;
        transition: 0.3s;
    }

        .sidebar a:hover {
            color: #EF6301;
        }

/* Styling the hamburger menu button */
.hamburger {
    font-size: 25px;
    cursor: pointer;
    position: fixed;
    top: 9px;
    left: 20px;
    z-index: 1000;
    color: black;
}

    .hamburger:hover {
        color: white;
    }

/* Styling the close button */
.close-btn {
    position: absolute;
    top: 20px;
    right: 25px;
    font-size: 24px;
    color: #f1f1f1;
    cursor: pointer;
}

    .close-btn:hover {
        color: #EF6301;
    }

/* Styling for open sidebar */
.sidebar.open {
    width: 250px;
}

/* Main content area */
.content {
    margin-left: 0;
    padding: 20px;
    transition: margin-left 0.3s;
}

    .content.shift {
        margin-left: 250px;
    }

.navbar-brand {
    margin-left: 50px;
}

/*--------------------------------------------------*/

.containerbox {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 50%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.containerbox-2 {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    max-width: 1800px;
    width: 100%;
    opacity: .9;
    margin: 0px auto; /* Center horizontally */
    display: flex; /* Center vertically if parent allows */
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.text-ctr {
    text-align: center;
    font-size: 70px;
}

.navbar,
.navbar-custom,
.navbar.navbar-expand-sm {
    z-index: 1050; /* Keep navbar below sidebar */
    position: relative;
}

.col-form-label {
    text-align: right
}

.formrow:last-child {
    border-bottom: none;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
}

body {
    background-image: url('images/bg2.png');
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    min-height: 100vh;
    overflow: hidden;
}

.custom-navbar {
    background-color: #FFA500 !important;
}

.custom-logout-btn {
    background-color: #F5E7CC;
    color: black;
}

    .custom-logout-btn:hover {
        background-color: #EF6301;
    }


#####################################################################################
site.css

html {
  font-size: 14px;
}

@media (min-width: 768px) {
  html {
    font-size: 16px;
  }
}

.btn:focus, .btn:active:focus, .btn-link.nav-link:focus, .form-control:focus, .form-check-input:focus {
  box-shadow: 0 0 0 0.1rem white, 0 0 0 0.25rem #258cfb;
}

html {
  position: relative;
  min-height: 100%;
}

body {
  margin-bottom: 60px;
}

#####################################################################################
